#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import platform
import shutil
import subprocess
import tempfile
import zipfile
import datetime
from pathlib import Path

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
VERSIONS = {
    'base': {
        'name': "Base",
        'description': "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        #'repo_url': "https://github.com/Vensus137/Coreness",
        'repo_url': "https://github.com/Vensus137/alpha-test-01",
        'branch': "main",
        'update_token_env': None  # Base –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
    },
    'pro': {
        'name': "Pro", 
        'description': "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        'repo_url': "https://github.com/Vensus137/coreness-pro",
        'branch': "main",
        'update_token_env': "UPDATE_TOKEN_PRO"
    }
}

# –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è —á–∏—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è)
CLEAN_SYNC_ITEMS = [
    "plugins",              # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    "tools",                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    "app",                  # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "docker"                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
]

# –§–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)
ROOT_FILES = [
    "main.py",              # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "requirements.txt",     # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
    "README.md",            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    "LICENSE_BASE",         # –õ–∏—Ü–µ–Ω–∑–∏—è Base –≤–µ—Ä—Å–∏–∏
    "LICENSE_PRO",          # –õ–∏—Ü–µ–Ω–∑–∏—è Pro –≤–µ—Ä—Å–∏–∏
    "env.example"           # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
]

# –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)
FACTORY_CONFIGS = [
    "config/settings.yaml",
    "config/presets/default",
    "resources"
]

# –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è)
EXCLUDE_PATHS = [
    "logs",
    "data", 
    ".git",
    ".github",
    ".gitignore"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–∞
BACKUP_CONFIG = {
    'default_keep': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±—ç–∫–∞–ø
    'dir_name': ".core_update_backup"
}

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def load_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    return {
        'versions': VERSIONS,
        'clean_sync_items': CLEAN_SYNC_ITEMS,
        'root_files': ROOT_FILES,
        'factory_configs': FACTORY_CONFIGS,
        'exclude_paths': EXCLUDE_PATHS,
        'backup': BACKUP_CONFIG
    }

def print_header():
    print(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}      CORENESS UPDATER          {Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}")

def get_project_root():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    script_path = Path(__file__).resolve()
    script_dir = script_path.parent
    script_dir_name = script_dir.name
    script_parent_name = script_dir.parent.name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∏—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ tools/core
    if script_dir_name == "core" and script_parent_name == "tools":
        # –°–∫—Ä–∏–ø—Ç –≤ tools/core -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ tools
        return script_dir.parent.parent
    else:
        # –°–∫—Ä–∏–ø—Ç –Ω–µ –≤ tools/core -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        return script_dir

def check_location():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫—É –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    script_path = Path(__file__).resolve()
    script_dir = script_path.parent
    project_root = get_project_root()
    
    print(f"{Colors.CYAN}üìÅ –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {script_dir}{Colors.END}")
    print(f"{Colors.CYAN}üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {Path.cwd()}{Colors.END}")
    print(f"{Colors.CYAN}üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∏—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ tools/core
    if script_dir == project_root / "tools" / "core":
        print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ tools/core!{Colors.END}")
        print(f"{Colors.YELLOW}   –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–¥–µ—Å—å –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!{Colors.END}")
        print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª–æ–º–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç!{Colors.END}")
        print(f"{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
        return "core"
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –ù–ï –≤ –ø–∞–ø–∫–µ tools/core!{Colors.END}")
        print(f"{Colors.YELLOW}   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ –∑–¥–µ—Å—å –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!{Colors.END}")
        print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!{Colors.END}")
        print(f"{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ tools/core{Colors.END}")
        return "other"

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Docker –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        import subprocess
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"{Colors.GREEN}‚úÖ Docker –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}{Colors.END}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print(f"{Colors.RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.END}")
        return False

def install_docker():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    import platform
    import subprocess
    
    system = platform.system().lower()
    print(f"{Colors.YELLOW}üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}")
    
    if system == "linux":
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è Linux...{Colors.END}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apt
            subprocess.run(['which', 'apt'], check=True, capture_output=True)
            print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º apt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([
                'sudo', 'apt', 'install', '-y', 
                'apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release'
            ], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPG –∫–ª—é—á Docker
            subprocess.run([
                'curl', '-fsSL', 'https://download.docker.com/linux/ubuntu/gpg', 
                '|', 'sudo', 'gpg', '--dearmor', '-o', '/usr/share/keyrings/docker-archive-keyring.gpg'
            ], shell=True, check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
            subprocess.run([
                'echo', '"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"',
                '|', 'sudo', 'tee', '/etc/apt/sources.list.d/docker.list'
            ], shell=True, check=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            subprocess.run(['sudo', 'apt', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
            subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
            
            print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt!{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}")
            
        except subprocess.CalledProcessError:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yum
                subprocess.run(['which', 'yum'], check=True, capture_output=True)
                print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º yum –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                subprocess.run(['sudo', 'yum', 'install', '-y', 'yum-utils'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
                subprocess.run(['sudo', 'yum-config-manager', '--add-repo', 'https://download.docker.com/linux/centos/docker-ce.repo'], check=True)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
                subprocess.run(['sudo', 'yum', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º Docker
                subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
                subprocess.run(['sudo', 'systemctl', 'enable', 'docker'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
                subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
                
                print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ yum!{Colors.END}")
                print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}")
                
            except subprocess.CalledProcessError:
                print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!{Colors.END}")
                return False
    elif system == "darwin":  # macOS
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è macOS...{Colors.END}")
        print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Homebrew –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
            subprocess.run(['which', 'brew'], check=True, capture_output=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine —á–µ—Ä–µ–∑ Homebrew
            subprocess.run(['brew', 'install', 'docker'], check=True)
            
            print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew!{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Engine: brew services start docker{Colors.END}")
            
        except subprocess.CalledProcessError:
            print(f"{Colors.RED}‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew –∏–ª–∏ Docker Desktop –≤—Ä—É—á–Ω—É—é.{Colors.END}")
            return False
    elif system == "windows":
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è Windows...{Colors.END}")
        print(f"{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WSL2 + Docker Engine{Colors.END}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WSL2
            subprocess.run(['wsl', '--version'], check=True, capture_output=True)
            print(f"{Colors.CYAN}üí° WSL2 –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –≤ WSL2...{Colors.END}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –≤ WSL2
            subprocess.run(['wsl', 'sudo', 'apt', 'update'], check=True)
            subprocess.run(['wsl', 'sudo', 'apt', 'install', '-y', 'docker.io'], check=True)
            subprocess.run(['wsl', 'sudo', 'systemctl', 'start', 'docker'], check=True)
            subprocess.run(['wsl', 'sudo', 'systemctl', 'enable', 'docker'], check=True)
            
            print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ WSL2!{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è Docker Engine —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ WSL2 –æ–∫—Ä—É–∂–µ–Ω–∏–∏{Colors.END}")
            
        except subprocess.CalledProcessError:
            print(f"{Colors.RED}‚ùå WSL2 –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ WSL2 –∏–ª–∏ Docker Desktop –≤—Ä—É—á–Ω—É—é.{Colors.END}")
            return False
    else:
        print(f"{Colors.RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}")
        return False
    
    return True

def download_docker_config():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    import subprocess
    import os
    
    print(f"{Colors.YELLOW}üì• –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker...{Colors.END}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    temp_dir = "docker-temp"
    if os.path.exists(temp_dir):
        import shutil
        shutil.rmtree(temp_dir)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL Base –≤–µ—Ä—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        base_repo_url = config['versions']['base']['repo_url']
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"{Colors.CYAN}üí° –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...{Colors.END}")
        print(f"{Colors.CYAN}   URL: {base_repo_url}{Colors.END}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subprocess.run([
            'git', 'clone', '--depth', '1', 
            '--filter=blob:none', 
            base_repo_url,
            temp_dir
        ], check=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º sparse-checkout –¥–ª—è –ø–∞–ø–∫–∏ docker
        subprocess.run([
            'git', 'sparse-checkout', 'init', '--cone'
        ], cwd=temp_dir, check=True)
        
        subprocess.run([
            'git', 'sparse-checkout', 'set', 'docker'
        ], cwd=temp_dir, check=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        import shutil
        if os.path.exists('docker'):
            shutil.rmtree('docker')
        shutil.copytree(f'{temp_dir}/docker', 'docker')
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ Windows)
        try:
            shutil.rmtree(temp_dir)
        except PermissionError:
            # –ù–∞ Windows –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–æ–≤
            import stat
            def remove_readonly(func, path, exc):
                if os.path.exists(path):
                    os.chmod(path, stat.S_IWRITE)
                    func(path)
            shutil.rmtree(temp_dir, onerror=remove_readonly)
        
        print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker —Å–∫–∞—á–∞–Ω–∞!{Colors.END}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Colors.END}")
        return False

def is_docker_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Docker daemon"""
    try:
        subprocess.run(['docker', 'info'], capture_output=True, check=True)
        return True
    except:
        return False

def start_docker_engine():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker Engine"""
    try:
        system = platform.system()
        
        if system == "Windows":
            print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ Windows...{Colors.END}")
            # –ù–∞ Windows Docker Engine –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ WSL2
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ WSL2
                subprocess.run(['wsl', 'sudo', 'systemctl', 'start', 'docker'], check=True)
                return True
            except:
                # –ï—Å–ª–∏ WSL2 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Docker Desktop (fallback)
                print(f"{Colors.YELLOW}‚ö†Ô∏è WSL2 –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º Docker Desktop...{Colors.END}")
                try:
                    subprocess.run(['cmd', '/c', 'start', 'Docker Desktop'], check=True)
                    return True
                except:
                    return False
            
        elif system == "Darwin":  # macOS
            print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ macOS...{Colors.END}")
            # –ù–∞ macOS Docker Engine —á–µ—Ä–µ–∑ Homebrew
            try:
                subprocess.run(['brew', 'services', 'start', 'docker'], check=True)
                return True
            except:
                # Fallback –Ω–∞ Docker Desktop
                try:
                    subprocess.run(['open', '-a', 'Docker'], check=True)
                    return True
                except:
                    return False
            
        elif system == "Linux":
            print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ Linux...{Colors.END}")
            # –ù–∞ Linux Docker Engine –∫–∞–∫ —Å–µ—Ä–≤–∏—Å
            subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
            return True
            
        else:
            print(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: {system}{Colors.END}")
            return False
            
    except subprocess.CalledProcessError:
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Engine{Colors.END}")
        return False
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker Engine: {e}{Colors.END}")
        return False

def is_container_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    try:
        result = subprocess.run([
            "docker-compose", "ps", "-q", "coreness"
        ], capture_output=True, text=True, cwd="docker")
        return bool(result.stdout.strip())
    except:
        return False

def start_container():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    print(f"{Colors.YELLOW}üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
    subprocess.run(["docker-compose", "up", "-d"], check=True, cwd="docker")
    print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!{Colors.END}")

def build_and_run_container():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    import subprocess
    import os
    
    print(f"{Colors.YELLOW}üî® –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
    
    if not os.path.exists('docker'):
        print(f"{Colors.RED}‚ùå –ü–∞–ø–∫–∞ docker –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Colors.END}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –∑–∞–ø—É—â–µ–Ω
    if not is_docker_running():
        print(f"{Colors.RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Engine –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        print(f"{Colors.CYAN}üí° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Engine...{Colors.END}")
        if start_docker_engine():
            print(f"{Colors.GREEN}‚úÖ Docker –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Docker —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            import time
            print(f"{Colors.YELLOW}‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker...{Colors.END}")
            time.sleep(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
            if is_docker_running():
                print(f"{Colors.GREEN}‚úÖ Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.END}")
            else:
                print(f"{Colors.RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –≤—Ä—É—á–Ω—É—é.{Colors.END}")
                return False
        else:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
            return False
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É docker
        os.chdir('docker')
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        print(f"{Colors.CYAN}üí° –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...{Colors.END}")
        subprocess.run(['docker-compose', 'build'], check=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
        subprocess.run(['docker-compose', 'up', '-d'], check=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
        os.chdir('..')
        
        print(f"{Colors.GREEN}‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}{Colors.END}")
        return False

def run_database_migration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker (–Ω–µ –∂–¥–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)"""
    print(f"{Colors.YELLOW}üóÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker...{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if not is_container_running():
        print(f"{Colors.YELLOW}‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...{Colors.END}")
        start_container()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–Ω–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    subprocess.Popen([
        "docker-compose", "exec", "coreness", 
        "python", "tools/database_manager.py", "--all", "--migrate"
    ], cwd="docker")
    
    print(f"{Colors.GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ!{Colors.END}")
    print(f"{Colors.CYAN}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:{Colors.END}")
    print(f"{Colors.CYAN}   docker-compose logs -f coreness{Colors.END}")

def remove_installer_script():
    """–£–¥–∞–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    script_path = os.path.abspath(__file__)
    script_dir = os.path.dirname(script_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ tools/ (–ª—é–±–æ–π –ø–æ–¥–ø–∞–ø–∫–µ)
    is_in_tools = "tools" in script_dir.split(os.sep)
    
    if not is_in_tools:
        try:
            os.remove(script_path)
            print(f"{Colors.GREEN}üóë –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω: {script_path}{Colors.END}")
        except Exception as e:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}{Colors.END}")
    else:
        print(f"{Colors.CYAN}üí° –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ tools/, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è{Colors.END}")

def run_initial_setup():
    print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –¥–ª—è Coreness.{Colors.END}")
    confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): ")
    if confirm.lower() != 'y':
        print(f"{Colors.RED}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.{Colors.END}")
        return
    
    print(f"{Colors.GREEN}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...{Colors.END}")
    
    # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker ==={Colors.END}")
    if not check_docker():
        print(f"{Colors.YELLOW}üì¶ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...{Colors.END}")
        if not install_docker():
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker!{Colors.END}")
            return
    else:
        print(f"{Colors.GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!{Colors.END}")
    
    # –≠—Ç–∞–ø 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==={Colors.END}")
    if not download_docker_config():
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker!{Colors.END}")
        return
    
    # –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ==={Colors.END}")
    if not build_and_run_container():
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å/–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä!{Colors.END}")
        return
    
    print(f"\n{Colors.GREEN}üéâ –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.END}")
    print(f"{Colors.CYAN}üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...{Colors.END}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    run_core_update()

def get_available_versions(config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    return list(config['versions'].keys())

def validate_version(version, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    return version.lower() in config['versions']

def get_version_info(version, config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
    return config['versions'].get(version.lower())

def get_github_token(version_info):
    """–ü–æ–ª—É—á–∞–µ—Ç GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
    if version_info['update_token_env'] is None:
        print(f"{Colors.CYAN}‚ÑπÔ∏è Base –≤–µ—Ä—Å–∏—è - –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Ç–æ–∫–µ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è{Colors.END}")
        return None
    
    token_env = version_info['update_token_env']
    token = os.getenv(token_env)
    if not token:
        print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {token_env} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Colors.END}")
        return None
    return token

def request_manual_token():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é"""
    print(f"\n{Colors.YELLOW}üîë –í–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω:{Colors.END}")
    
    while True:
        token = input("GitHub —Ç–æ–∫–µ–Ω: ").strip()
        if token:
            return token
        print(f"{Colors.RED}‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")

def is_excluded(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—Ç—å –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    for excl in config['exclude_paths']:
        if path == excl:
            return True
        if excl.endswith('*'):
            pattern = excl[:-1]
            if path.startswith(pattern):
                return True
        if excl in path.split(os.sep):
            return True
    
    return False

def is_clean_sync_item(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç"""
    return path in config['clean_sync_items']

def is_factory_config(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""
    return path in config['factory_configs']

def remove_old(path):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    if os.path.exists(path):
        if os.path.isdir(path):
            shutil.rmtree(path)
            print(f"{Colors.YELLOW}üóë –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path}{Colors.END}")
        else:
            os.remove(path)
            print(f"{Colors.YELLOW}üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}{Colors.END}")

def copy_new(src, dst):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    if os.path.isdir(src):
        shutil.copytree(src, dst)
        print(f"{Colors.GREEN}üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {dst}{Colors.END}")
    else:
        shutil.copy2(src, dst)
        print(f"{Colors.GREEN}üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {dst}{Colors.END}")

def create_backup(project_root, config, include_factory_configs=False):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
    import datetime
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = os.path.join(project_root, f"{config['backup']['dir_name']}_{timestamp}")
    
    print(f"{Colors.YELLOW}üóÇ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ {backup_dir}...{Colors.END}")
    
    os.makedirs(backup_dir, exist_ok=True)
    
    total_items = 0
    processed_items = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for item in os.listdir(project_root):
        if not is_excluded(item, config):
            if not include_factory_configs and is_factory_config(item, config):
                continue
            total_items += 1
    
    print(f"{Colors.CYAN}üìÅ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {total_items}{Colors.END}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
    for item in os.listdir(project_root):
        if is_excluded(item, config):
            continue
            
        if not include_factory_configs and is_factory_config(item, config):
            continue
            
        try:
            processed_items += 1
            print(f"{Colors.CYAN}üóÇ –ö–æ–ø–∏—Ä—É—é {processed_items}/{total_items}: {item}{Colors.END}")
            
            src_path = os.path.join(project_root, item)
            backup_path = os.path.join(backup_dir, item)
            
            if os.path.isdir(src_path):
                shutil.copytree(src_path, backup_path, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, backup_path)
        except Exception as e:
            print(f"{Colors.RED}‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item}: {e}{Colors.END}")
            continue
    
    print(f"{Colors.GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {processed_items}/{total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤{Colors.END}")
    return backup_dir

def restore_backup(backup_dir, project_root):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print(f"{Colors.YELLOW}‚è™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...{Colors.END}")
    
    errors = []
    
    if not os.path.exists(backup_dir):
        print(f"{Colors.RED}‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±—ç–∫–∞–ø: {backup_dir}{Colors.END}")
        return ["backup_dir_not_found"]
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞
    for item in os.listdir(backup_dir):
        try:
            backup_path = os.path.join(backup_dir, item)
            target_path = os.path.join(project_root, item)
            
            if is_excluded(item):
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª/–ø–∞–ø–∫—É
            if os.path.exists(target_path):
                remove_old(target_path)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            if os.path.isdir(backup_path):
                shutil.copytree(backup_path, target_path)
            else:
                shutil.copy2(backup_path, target_path)
                
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {item}: {e}{Colors.END}")
            errors.append(item)
    
    return errors

def is_factory_config(path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""
    factory_configs = ["config", "resources"]
    return path in factory_configs

def download_and_update(version_info, github_token, project_root, update_factory_configs=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
    import tempfile
    import zipfile
    import requests
    
    print(f"{Colors.YELLOW}üì• –°–∫–∞—á–∏–≤–∞—é {version_info['name']} –≤–µ—Ä—Å–∏—é...{Colors.END}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    if github_token:
        headers = {"Authorization": f"token {github_token}"}
        print(f"{Colors.CYAN}üîë –ü–æ–¥–∫–ª—é—á–∞—é—Å—å —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è Pro –≤–µ—Ä—Å–∏–∏...{Colors.END}")
    else:
        headers = {}
        print(f"{Colors.CYAN}üîì –°–∫–∞—á–∏–≤–∞—é Base –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)...{Colors.END}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å GitHub
        repo_url = version_info['repo_url']
        branch = version_info['branch']
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_methods = [
            f"{repo_url}/archive/refs/heads/{branch}.zip",
            f"{repo_url}/releases/latest/download/source.zip",
        ]
        
        print(f"{Colors.CYAN}üîΩ –°–∫–∞—á–∏–≤–∞—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_url}{Colors.END}")
        print(f"{Colors.CYAN}   –í–µ—Ç–∫–∞: {branch}{Colors.END}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response = None
        for i, zip_url in enumerate(download_methods, 1):
            print(f"{Colors.CYAN}   üîç –ú–µ—Ç–æ–¥ {i}: {zip_url}{Colors.END}")
            
            try:
                response = requests.get(zip_url, headers=headers)
                if response.status_code == 200:
                    print(f"{Colors.GREEN}   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç{Colors.END}")
                    break
                else:
                    print(f"{Colors.RED}   ‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}{Colors.END}")
            except Exception as e:
                print(f"{Colors.RED}   ‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        
        if not response or response.status_code != 200:
            raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å")
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}{Colors.END}")
        raise
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    with tempfile.TemporaryDirectory() as tmpdir:
        zip_path = os.path.join(tmpdir, "repo.zip")
        with open(zip_path, "wb") as f:
            f.write(response.content)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(tmpdir)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
        repo_root = None
        for name in os.listdir(tmpdir):
            if os.path.isdir(os.path.join(tmpdir, name)) and name.endswith(f"-{branch}"):
                repo_root = os.path.join(tmpdir, name)
                break
        
        if not repo_root:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"{Colors.YELLOW}‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏...{Colors.END}")
        for item in os.listdir(repo_root):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if is_excluded(item):
                print(f"{Colors.CYAN}‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π: {item}{Colors.END}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
            if not update_factory_configs and is_factory_config(item):
                print(f"{Colors.CYAN}‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥: {item}{Colors.END}")
                continue
            
            abs_old = os.path.join(project_root, item)
            abs_new = os.path.join(repo_root, item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if is_clean_sync_item(item):
                print(f"{Colors.YELLOW}üóë –ß–∏—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {item}{Colors.END}")
                remove_old(abs_old)
                copy_new(abs_new, abs_old)
            else:
                print(f"{Colors.CYAN}‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é: {item}{Colors.END}")
                remove_old(abs_old)
                copy_new(abs_new, abs_old)

def run_core_update():
    print(f"{Colors.GREEN}üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞...{Colors.END}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    project_root = get_project_root()
    
    print(f"{Colors.CYAN}üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_root}{Colors.END}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    available_versions = get_available_versions()
    print(f"{Colors.YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:{Colors.END}")
    for version in available_versions:
        version_info = get_version_info(version)
        print(f"  ‚Ä¢ {version.upper()}: {version_info['name']} - {version_info['description']}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    while True:
        selected_version = input(f"\n{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({', '.join(available_versions)}): {Colors.END}").strip().lower()
        if validate_version(selected_version):
            break
        print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_versions)}{Colors.END}")
    
    version_info = get_version_info(selected_version)
    print(f"\n{Colors.GREEN}‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_info['name']} ({version_info['description']}){Colors.END}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    update_factory_configs = input(f"\n{Colors.YELLOW}–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (config, resources)? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): {Colors.END}").strip().lower() == 'y'
    
    if update_factory_configs:
        print(f"{Colors.YELLOW}üõ† –í–∫–ª—é—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤!{Colors.END}")
    else:
        print(f"{Colors.CYAN}üìÅ –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ){Colors.END}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = create_backup(project_root)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        github_token = get_github_token(version_info)
        
        if not github_token and version_info['update_token_env']:
            # Pro –≤–µ—Ä—Å–∏—è - –ø—Ä–æ–±—É–µ–º —Å —Ä—É—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            print(f"{Colors.YELLOW}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è{Colors.END}")
            print(f"{Colors.CYAN}‚ÑπÔ∏è –ü—Ä–æ–±—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é...{Colors.END}")
            github_token = request_manual_token()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        download_and_update(version_info, github_token, project_root, update_factory_configs)
        
        print(f"{Colors.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!{Colors.END}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü: –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==={Colors.END}")
        run_database_migration()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
        keep_backup = input(f"\n{Colors.YELLOW}–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): {Colors.END}").strip().lower() == 'y'
        if keep_backup:
            shutil.rmtree(backup_dir)
            print(f"{Colors.GREEN}üóë –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞.{Colors.END}")
        else:
            print(f"{Colors.CYAN}üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}{Colors.END}")
        
        print(f"\n{Colors.GREEN}üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ.{Colors.END}")
        print(f"{Colors.CYAN}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:{Colors.END}")
        print(f"{Colors.CYAN}   docker-compose logs -f coreness{Colors.END}")
        
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü: –û—á–∏—Å—Ç–∫–∞ ==={Colors.END}")
        remove_installer_script()
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}{Colors.END}")
        print(f"{Colors.YELLOW}‚è™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...{Colors.END}")
        
        errors = restore_backup(backup_dir, project_root)
        if errors:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏: {errors}{Colors.END}")
            print(f"{Colors.YELLOW}‚ùó –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {backup_dir}. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é!{Colors.END}")
        else:
            print(f"{Colors.GREEN}‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{Colors.END}")
            print(f"{Colors.CYAN}üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}{Colors.END}")

def main_menu():
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
    location = check_location()
    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    print(f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Colors.END}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞–ø–∫–∏
    if location == "core":
        print("1) ‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Coreness (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("2) ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ Coreness (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("3) –í—ã—Ö–æ–¥")
        
        while True:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")
            if choice == '1':
                print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–∑ –ø–∞–ø–∫–∏ tools/core!{Colors.END}")
                print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.{Colors.END}")
                confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                if confirm.lower() == 'y':
                    run_initial_setup()
                break
            elif choice == '2':
                run_core_update()
                break
            elif choice == '3':
                print(f"{Colors.BLUE}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
                sys.exit(0)
            else:
                print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
    else:
        print("1) ‚úÖ –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Coreness (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("2) ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ Coreness (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("3) –í—ã—Ö–æ–¥")
        
        while True:
            choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")
            if choice == '1':
                run_initial_setup()
                break
            elif choice == '2':
                print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ –Ω–µ –∏–∑ –ø–∞–ø–∫–∏ tools/core!{Colors.END}")
                print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.{Colors.END}")
                confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                if confirm.lower() == 'y':
                    run_core_update()
                break
            elif choice == '3':
                print(f"{Colors.BLUE}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
                sys.exit(0)
            else:
                print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")

if __name__ == "__main__":
    main_menu()
