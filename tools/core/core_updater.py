#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import platform
import shutil
import subprocess
import time
from pathlib import Path

# –û–¢–ö–õ–Æ–ß–ê–ï–ú –ë–£–§–ï–†–ò–ó–ê–¶–ò–Æ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò
if hasattr(sys.stdout, 'reconfigure'):
    # Python 3.7+
    sys.stdout.reconfigure(line_buffering=True)
    sys.stderr.reconfigure(line_buffering=True)
else:
    # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Python
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1)  # line buffered
    sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
import io
import locale

try:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['LC_ALL'] = 'C.UTF-8'
    os.environ['LANG'] = 'C.UTF-8'
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å UTF-8
    try:
        locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
        except:
            pass
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ —Å UTF-8
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    if hasattr(sys.stderr, 'buffer'):
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
    if hasattr(sys.stdin, 'buffer'):
        sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8', errors='replace')
        
except Exception as e:
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    pass

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
VERSIONS = {
    'base': {
        'name': "Base",
        'description': "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        #'repo_url': "https://github.com/Vensus137/Coreness",
        'repo_url': "https://github.com/Vensus137/alpha-test-01",
        'branch': "main",
        'update_token_env': None  # Base –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
    },
    'pro': {
        'name': "Pro", 
        'description': "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        'repo_url': "https://github.com/Vensus137/coreness-pro",
        'branch': "main",
        'update_token_env': "UPDATE_TOKEN_PRO"
    }
}

# –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è —á–∏—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è)
CLEAN_SYNC_ITEMS = [
    "plugins",              # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    "tools",                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    "app",                  # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "docker"                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
]

# –§–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)
ROOT_FILES = [
    "main.py",              # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "requirements.txt",     # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
    "README.md",            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    "LICENSE_BASE",         # –õ–∏—Ü–µ–Ω–∑–∏—è Base –≤–µ—Ä—Å–∏–∏
    "LICENSE_PRO",          # –õ–∏—Ü–µ–Ω–∑–∏—è Pro –≤–µ—Ä—Å–∏–∏
    "env.example"           # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
]

# –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)
FACTORY_CONFIGS = [
    "config/settings.yaml",
    "config/presets/default"
]

# –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è)
EXCLUDE_PATHS = [
    "logs",
    "data", 
    "resources",
    ".git",
    ".github",
    ".gitignore",
    ".core_update_backup*"  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–∞
BACKUP_CONFIG = {
    'default_keep': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±—ç–∫–∞–ø
    'dir_name': ".core_update_backup"
}

# –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
NON_CRITICAL_PATHS = [
    "tools",           # –í—Å—è –ø–∞–ø–∫–∞ tools (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
    "tools/core"       # –ü–∞–ø–∫–∞ core –≤–Ω—É—Ç—Ä–∏ tools (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
]

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def load_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    return {
        'versions': VERSIONS,
        'clean_sync_items': CLEAN_SYNC_ITEMS,
        'root_files': ROOT_FILES,
        'factory_configs': FACTORY_CONFIGS,
        'exclude_paths': EXCLUDE_PATHS,
        'backup': BACKUP_CONFIG,
        'non_critical_paths': NON_CRITICAL_PATHS
    }

def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print(f"{Colors.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...{Colors.END}")
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è core_updater
    required_packages = [
        'requests',  # –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å GitHub
        'zipfile',   # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
        'tempfile',  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
        'shutil',    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
        'subprocess' # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
    ]
    
    missing_packages = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
    for package in required_packages:
        try:
            if package in ['zipfile', 'tempfile', 'shutil', 'subprocess']:
                # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
                __import__(package)
                print(f"{Colors.GREEN}‚úÖ {package} (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å){Colors.END}")
            else:
                # –í–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
                __import__(package)
                print(f"{Colors.GREEN}‚úÖ {package} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω){Colors.END}")
        except ImportError:
            if package not in ['zipfile', 'tempfile', 'shutil', 'subprocess']:
                missing_packages.append(package)
                print(f"{Colors.RED}‚ùå {package} (–Ω–µ –Ω–∞–π–¥–µ–Ω){Colors.END}")
    
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
    if is_running_in_container():
        if missing_packages:
            print(f"{Colors.RED}‚ùå –í –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_packages)}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ Docker –æ–±—Ä–∞–∑: docker compose build{Colors.END}")
            return False
        else:
            print(f"{Colors.GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!{Colors.END}")
            return True
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–æ—Å—Ç–µ
    if missing_packages:
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}{Colors.END}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        print(f"{Colors.CYAN}üîÑ –ü—Ä–æ–≤–µ—Ä—è—é pip...{Colors.END}")
        try:
            subprocess.run([sys.executable, "-m", "pip", "--version"], 
                         capture_output=True, text=True, check=True)
            print(f"{Colors.GREEN}‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}")
        except:
            print(f"{Colors.YELLOW}‚ö†Ô∏è pip –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...{Colors.END}")
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip —á–µ—Ä–µ–∑ get-pip.py
                subprocess.run([
                    sys.executable, "-c", 
                    "import urllib.request; urllib.request.urlretrieve('https://bootstrap.pypa.io/get-pip.py', 'get-pip.py')"
                ], check=True)
                subprocess.run([sys.executable, "get-pip.py"], check=True)
                subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
                print(f"{Colors.GREEN}‚úÖ pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")
            except Exception as e:
                print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip: {e}{Colors.END}")
                print(f"{Colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pip –≤—Ä—É—á–Ω—É—é: curl https://bootstrap.pypa.io/get-pip.py | python3{Colors.END}")
                return False
        
        try:
            for package in missing_packages:
                print(f"{Colors.CYAN}üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...{Colors.END}")
                
                # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    print(f"{Colors.GREEN}‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}")
                else:
                    print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}:{Colors.END}")
                    print(f"{Colors.RED}   stdout: {result.stdout}{Colors.END}")
                    print(f"{Colors.RED}   stderr: {result.stderr}{Colors.END}")
                    
                    # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                    print(f"{Colors.YELLOW}üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã...{Colors.END}")
                    
                    # –°–ø–æ—Å–æ–± 1: pip3 –≤–º–µ—Å—Ç–æ python -m pip
                    result2 = subprocess.run([
                        "pip3", "install", package
                    ], capture_output=True, text=True)
                    
                    if result2.returncode == 0:
                        print(f"{Colors.GREEN}‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ pip3{Colors.END}")
                    else:
                        # –°–ø–æ—Å–æ–± 2: apt-get –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
                        if package == "requests":
                            print(f"{Colors.YELLOW}üîÑ –ü—Ä–æ–±—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ apt-get...{Colors.END}")
                            result3 = subprocess.run([
                                "apt-get", "update"
                            ], capture_output=True, text=True)
                            
                            result4 = subprocess.run([
                                "apt-get", "install", "-y", "python3-requests"
                            ], capture_output=True, text=True)
                            
                            if result4.returncode == 0:
                                print(f"{Colors.GREEN}‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt-get{Colors.END}")
                            else:
                                print(f"{Colors.RED}‚ùå –í—Å–µ —Å–ø–æ—Å–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏{Colors.END}")
                                print(f"{Colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install {package}{Colors.END}")
                                return False
            
            print(f"{Colors.GREEN}üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}")
            return True
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: pip install {' '.join(missing_packages)}{Colors.END}")
            return False
    else:
        print(f"{Colors.GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}")
        return True

def print_header():
    print(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}      CORENESS UPDATER          {Colors.END}")
    print(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}")

def get_project_root():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    script_path = Path(__file__).resolve()
    script_dir = script_path.parent
    script_dir_name = script_dir.name
    script_parent_name = script_dir.parent.name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∏—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ tools/core
    if script_dir_name == "core" and script_parent_name == "tools":
        # –°–∫—Ä–∏–ø—Ç –≤ tools/core -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ tools
        return script_dir.parent.parent
    else:
        # –°–∫—Ä–∏–ø—Ç –Ω–µ –≤ tools/core -> –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        return script_dir

def check_location():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫—É –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    script_path = Path(__file__).resolve()
    script_dir = script_path.parent
    project_root = get_project_root()
    
    print(f"{Colors.CYAN}üìÅ –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {script_dir}{Colors.END}")
    print(f"{Colors.CYAN}üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {Path.cwd()}{Colors.END}")
    print(f"{Colors.CYAN}üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {project_root}{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–µ–∂–∏—Ç –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ tools/core
    if script_dir == project_root / "tools" / "core":
        print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ tools/core!{Colors.END}")
        print(f"{Colors.YELLOW}   –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–¥–µ—Å—å –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!{Colors.END}")
        print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–ª–æ–º–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç!{Colors.END}")
        print(f"{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
        return "core"
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –ù–ï –≤ –ø–∞–ø–∫–µ tools/core!{Colors.END}")
        print(f"{Colors.YELLOW}   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ –∑–¥–µ—Å—å –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!{Colors.END}")
        print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º!{Colors.END}")
        print(f"{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ tools/core{Colors.END}")
        return "other"

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Docker –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        import subprocess
        result = subprocess.run(['docker', '--version'], 
                              capture_output=True, text=True, check=True)
        print(f"{Colors.GREEN}‚úÖ Docker –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}{Colors.END}")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print(f"{Colors.RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.END}")
        return False

def install_docker():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    import platform
    import subprocess
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Docker
    if is_docker_running():
        print(f"{Colors.GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!{Colors.END}")
        return True
    
    system = platform.system().lower()
    print(f"{Colors.YELLOW}üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}")
    
    if system == "linux":
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è Linux...{Colors.END}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apt
            subprocess.run(['which', 'apt'], check=True, capture_output=True)
            print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º apt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([
                'sudo', 'apt', 'install', '-y', 
                'apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release'
            ], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPG –∫–ª—é—á Docker
            subprocess.run(
                'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg',
                shell=True, check=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
            subprocess.run(
                'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list',
                shell=True, check=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            subprocess.run(['sudo', 'apt', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
            subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
            
            print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt!{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}")
            
        except subprocess.CalledProcessError:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yum
                subprocess.run(['which', 'yum'], check=True, capture_output=True)
                print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º yum –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                subprocess.run(['sudo', 'yum', 'install', '-y', 'yum-utils'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
                subprocess.run(['sudo', 'yum-config-manager', '--add-repo', 'https://download.docker.com/linux/centos/docker-ce.repo'], check=True)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
                subprocess.run(['sudo', 'yum', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º Docker
                subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
                subprocess.run(['sudo', 'systemctl', 'enable', 'docker'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
                subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
                
                print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ yum!{Colors.END}")
                print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}")
                
            except subprocess.CalledProcessError:
                print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!{Colors.END}")
                return False
    elif system == "darwin":  # macOS
        print(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è macOS...{Colors.END}")
        print(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Homebrew –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
            subprocess.run(['which', 'brew'], check=True, capture_output=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine —á–µ—Ä–µ–∑ Homebrew
            subprocess.run(['brew', 'install', 'docker'], check=True)
            
            print(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew!{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Engine: brew services start docker{Colors.END}")
            
        except subprocess.CalledProcessError:
            print(f"{Colors.RED}‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew –∏–ª–∏ Docker Desktop –≤—Ä—É—á–Ω—É—é.{Colors.END}")
            return False
    elif system == "windows":
        print(f"{Colors.YELLOW}‚ö†Ô∏è Windows: Docker –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏{Colors.END}")
        print(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏{Colors.END}")
        return False
    else:
        print(f"{Colors.RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}")
        return False
    
    return True

def download_docker_config():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    import subprocess
    import os
    
    print(f"{Colors.YELLOW}üì• –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker...{Colors.END}")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    temp_dir = "docker-temp"
    if os.path.exists(temp_dir):
        import shutil
        shutil.rmtree(temp_dir)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL Base –≤–µ—Ä—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        base_repo_url = config['versions']['base']['repo_url']
        
        # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"{Colors.CYAN}üí° –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...{Colors.END}")
        print(f"{Colors.CYAN}   URL: {base_repo_url}{Colors.END}")
        
        # –°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        subprocess.run([
            'git', 'clone', '--depth', '1', 
            '--filter=blob:none', 
            base_repo_url,
            temp_dir
        ], check=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º sparse-checkout –¥–ª—è –ø–∞–ø–∫–∏ docker
        subprocess.run([
            'git', 'sparse-checkout', 'init', '--cone'
        ], cwd=temp_dir, check=True)
        
        subprocess.run([
            'git', 'sparse-checkout', 'set', 'docker'
        ], cwd=temp_dir, check=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        import shutil
        if os.path.exists('docker'):
            shutil.rmtree('docker')
        shutil.copytree(f'{temp_dir}/docker', 'docker')
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ Windows)
        try:
            shutil.rmtree(temp_dir)
        except PermissionError:
            # –ù–∞ Windows –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–æ–≤
            import stat
            def remove_readonly(func, path, exc):
                if os.path.exists(path):
                    os.chmod(path, stat.S_IWRITE)
                    func(path)
            shutil.rmtree(temp_dir, onerror=remove_readonly)
        
        print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker —Å–∫–∞—á–∞–Ω–∞!{Colors.END}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Colors.END}")
        return False

def is_docker_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –æ–Ω"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—é, –Ω–æ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ daemon
        subprocess.run(['docker', 'info'], capture_output=True, check=True)
        return True
    except:
        return False

def start_docker_engine():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker Engine"""
    try:
        system = platform.system()
        
        if system == "Windows":
            print(f"{Colors.YELLOW}‚ö†Ô∏è Windows: Docker –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏{Colors.END}")
            print(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏{Colors.END}")
            return False
            
        elif system == "Darwin":  # macOS
            print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ macOS...{Colors.END}")
            # –ù–∞ macOS Docker Engine —á–µ—Ä–µ–∑ Homebrew
            try:
                subprocess.run(['brew', 'services', 'start', 'docker'], check=True)
                return True
            except:
                # Fallback –Ω–∞ Docker Desktop
                try:
                    subprocess.run(['open', '-a', 'Docker'], check=True)
                    return True
                except:
                    return False
            
        elif system == "Linux":
            print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ Linux...{Colors.END}")
            # –ù–∞ Linux Docker Engine –∫–∞–∫ —Å–µ—Ä–≤–∏—Å
            subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
            return True
            
        else:
            print(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: {system}{Colors.END}")
            return False
            
    except subprocess.CalledProcessError:
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Engine{Colors.END}")
        return False
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker Engine: {e}{Colors.END}")
        return False

def is_container_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ docker ps
        result = subprocess.run([
            "docker", "ps", "-q", "--filter", "name=coreness"
        ], capture_output=True, text=True)
        return bool(result.stdout.strip())
    except:
        return False

def start_container():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    print(f"{Colors.YELLOW}üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
    subprocess.run(["docker", "compose", "up", "-d"], check=True, cwd="docker")
    print(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!{Colors.END}")

def build_and_run_container():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    import subprocess
    import os
    
    print(f"{Colors.YELLOW}üî® –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
    
    if not os.path.exists('docker'):
        print(f"{Colors.RED}‚ùå –ü–∞–ø–∫–∞ docker –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Colors.END}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
    if not is_docker_running():
        print(f"{Colors.RED}‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!{Colors.END}")
        print(f"{Colors.CYAN}üí° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker...{Colors.END}")
        
        if start_docker_engine():
            print(f"{Colors.GREEN}‚úÖ Docker –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Docker —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            import time
            print(f"{Colors.YELLOW}‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker...{Colors.END}")
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
            if is_docker_running():
                print(f"{Colors.GREEN}‚úÖ Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.END}")
            else:
                print(f"{Colors.RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.{Colors.END}")
                print(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
                print(f"{Colors.YELLOW}‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è{Colors.END}")
                return False
        else:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker Desktop –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è{Colors.END}")
            return False
    
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É docker
        os.chdir('docker')
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
        print(f"{Colors.CYAN}üí° –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...{Colors.END}")
        subprocess.run(['docker', 'compose', 'build'], check=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
        subprocess.run(['docker', 'compose', 'up', '-d'], check=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
        os.chdir('..')
        
        print(f"{Colors.GREEN}‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!{Colors.END}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}{Colors.END}")
        return False

def run_database_migration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ Docker –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é)"""
    print(f"{Colors.YELLOW}üóÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if is_docker_running() and is_container_running():
        print(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Docker –Ω–∞–ø—Ä—è–º—É—é (–ª–æ–≥–∏ –∏–¥—É—Ç —Å—Ä–∞–∑—É)
        print(f"{Colors.CYAN}‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Docker...{Colors.END}")
        print(f"{Colors.CYAN}üìã –õ–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:{Colors.END}")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ - –ª–æ–≥–∏ –∏–¥—É—Ç —Å—Ä–∞–∑—É
            result = subprocess.run([
                "docker", "compose", "exec", "coreness", 
                "python", "-u", "tools/database_manager.py", "--all", "--migrate"
            ], cwd="docker", timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            if result.returncode == 0:
                print(f"\n{Colors.GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Docker!{Colors.END}")
            else:
                print(f"\n{Colors.RED}‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!{Colors.END}")
                print(f"{Colors.RED}–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}{Colors.END}")
                
        except subprocess.TimeoutExpired:
            print(f"\n{Colors.YELLOW}‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç){Colors.END}")
            print(f"{Colors.CYAN}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: docker compose logs -f coreness{Colors.END}")
        except Exception as e:
            print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}{Colors.END}")
        
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é...{Colors.END}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_script = "tools/core/database_manager.py"
        if os.path.exists(migration_script):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é (–ª–æ–≥–∏ –∏–¥—É—Ç —Å—Ä–∞–∑—É)
            print(f"{Colors.CYAN}‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.END}")
            print(f"{Colors.CYAN}üìã –õ–æ–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:{Colors.END}")
            
            try:
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –±–µ–∑ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ - –ª–æ–≥–∏ –∏–¥—É—Ç —Å—Ä–∞–∑—É
                result = subprocess.run([
                    sys.executable, "-u", migration_script, "--all", "--migrate"
                ], timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
                
                if result.returncode == 0:
                    print(f"\n{Colors.GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!{Colors.END}")
                else:
                    print(f"\n{Colors.RED}‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!{Colors.END}")
                    print(f"{Colors.RED}–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}{Colors.END}")
                        
            except subprocess.TimeoutExpired:
                print(f"\n{Colors.YELLOW}‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç){Colors.END}")
                print(f"{Colors.CYAN}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—Ä—É—á–Ω—É—é{Colors.END}")
            except Exception as e:
                print(f"\n{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}{Colors.END}")
        else:
            print(f"{Colors.RED}‚ùå –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_script}{Colors.END}")
            print(f"{Colors.YELLOW}üí° –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞{Colors.END}")

def is_running_in_container():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    return os.path.exists("/.dockerenv")

def remove_installer_script():
    """–£–¥–∞–ª—è–µ—Ç —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (—ç—Ç–∞–ø 3)"""
    project_root = get_project_root()
    root_script_path = os.path.join(project_root, "core_updater.py")
    
    print(f"{Colors.CYAN}üß† –≠—Ç–∞–ø 3: –£–¥–∞–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(root_script_path):
        try:
            os.remove(root_script_path)
            print(f"{Colors.GREEN}üóë –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è: {root_script_path}{Colors.END}")
        except Exception as e:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}{Colors.END}")
    else:
        print(f"{Colors.CYAN}üí° –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")

def run_initial_setup():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    system = platform.system()
    if system == "Windows":
        print(f"{Colors.YELLOW}‚ö†Ô∏è Windows: Docker –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏{Colors.END}")
        print(f"{Colors.CYAN}üí° –ë—É–¥–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–æ–µ —è–¥—Ä–æ –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
        print(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ{Colors.END}")
        print()
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞ –±–µ–∑ Docker
        print(f"{Colors.GREEN}üöÄ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–æ–µ–∫—Ç Coreness...{Colors.END}")
        
        # –≠—Ç–∞–ø 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==={Colors.END}")
        if not download_docker_config():
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker!{Colors.END}")
            return
        
        # –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ==={Colors.END}")
        print(f"{Colors.YELLOW}‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ Windows{Colors.END}")
        print(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏{Colors.END}")
        
        print(f"\n{Colors.GREEN}üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Colors.END}")
        print(f"{Colors.CYAN}üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...{Colors.END}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        run_core_update()
        return
    
    print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ —Å—Ç–∞–Ω–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –¥–ª—è Coreness.{Colors.END}")
    confirm = safe_input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É? (y/N): ")
    
    # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    confirm = confirm.strip().lower()
    
    if confirm != 'y':
        print(f"{Colors.RED}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.{Colors.END}")
        return
    
    print(f"{Colors.GREEN}üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...{Colors.END}")
    
    # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker ==={Colors.END}")
    if not check_docker():
        print(f"{Colors.YELLOW}üì¶ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...{Colors.END}")
        if not install_docker():
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker!{Colors.END}")
            return
    else:
        print(f"{Colors.GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!{Colors.END}")
    
    # –≠—Ç–∞–ø 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==={Colors.END}")
    if not download_docker_config():
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker!{Colors.END}")
        return
    
    # –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü 3: –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ ==={Colors.END}")
    if not build_and_run_container():
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å/–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä!{Colors.END}")
        return
    
    print(f"\n{Colors.GREEN}üéâ –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.END}")
    print(f"{Colors.CYAN}üí° –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...{Colors.END}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print(f"{Colors.CYAN}üí° –û–ø—Ä–µ–¥–µ–ª—è—é —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if is_docker_running() and is_container_running():
        print(f"{Colors.CYAN}üê≥ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Docker...{Colors.END}")
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è docker-compose
            docker_dir = "docker" if os.path.exists("docker/docker-compose.yml") else "."
            print(f"{Colors.CYAN}üìÅ –ó–∞–ø—É—Å–∫–∞—é –∏–∑ –ø–∞–ø–∫–∏: {docker_dir}{Colors.END}")
            
            result = subprocess.run([
                "docker", "compose", "exec", "coreness", 
                "python", "core_updater.py"
            ], cwd=docker_dir)
            
            if result.returncode == 0:
                print(f"{Colors.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ!{Colors.END}")
            else:
                print(f"{Colors.RED}‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π{Colors.END}")
                print(f"{Colors.YELLOW}üí° Fallback: –∑–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–µ...{Colors.END}")
                run_core_update()
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: {e}{Colors.END}")
            print(f"{Colors.YELLOW}üí° Fallback: –∑–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–µ...{Colors.END}")
            run_core_update()
    else:
        print(f"{Colors.CYAN}üñ• –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ö–æ—Å—Ç–µ...{Colors.END}")
        run_core_update()

def get_available_versions(config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    return list(config['versions'].keys())

def validate_version(version, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    return version.lower() in config['versions']

def get_version_info(version, config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
    return config['versions'].get(version.lower())

def get_github_token(version_info):
    """–ü–æ–ª—É—á–∞–µ—Ç GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
    if version_info['update_token_env'] is None:
        print(f"{Colors.CYAN}‚ÑπÔ∏è Base –≤–µ—Ä—Å–∏—è - –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Ç–æ–∫–µ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è{Colors.END}")
        return None
    
    token_env = version_info['update_token_env']
    token = os.getenv(token_env)
    if not token:
        print(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {token_env} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Colors.END}")
        return None
    return token

def safe_input(prompt):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    try:
        result = input(prompt)
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        return result.strip()
    except UnicodeDecodeError:
        # –ï—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        print("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã):")
        try:
            result = input("> ")
            return result.strip()
        except:
            return ""
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")
        return ""

def request_manual_token():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é"""
    print(f"\n{Colors.YELLOW}üîë –í–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω:{Colors.END}")
    
    while True:
        token = safe_input("GitHub —Ç–æ–∫–µ–Ω: ").strip()
        if token:
            return token
        print(f"{Colors.RED}‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")

def is_excluded(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—Ç—å –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    for excl in config['exclude_paths']:
        if path == excl:
            return True
        if excl.endswith('*'):
            pattern = excl[:-1]
            if path.startswith(pattern):
                return True
        if excl in path.split(os.sep):
            return True
    
    return False

def is_clean_sync_item(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç"""
    return path in config['clean_sync_items']

def is_factory_config(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–º –∫–æ–Ω—Ñ–∏–≥–æ–º"""
    for factory_path in config['factory_configs']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if path == factory_path:
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ path —è–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–æ–π –¥–ª—è factory_path
        if factory_path.startswith(path + "/"):
            return True
    return False

def is_non_critical(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è –ø–∞–ø–∫–∏/—Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
    path_name = os.path.basename(path)
    
    for non_critical_path in config['non_critical_paths']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –ø—É—Ç–µ–π —Ç–∏–ø–∞ "tools")
        if path_name == non_critical_path:
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ non_critical_path —Å–æ–¥–µ—Ä–∂–∏—Ç path_name
        if non_critical_path.startswith(path_name + "/"):
            return True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ path –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ non_critical_path (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏)
        normalized_path = path.replace("\\", "/")
        normalized_non_critical = non_critical_path.replace("\\", "/")
        if normalized_path.endswith(normalized_non_critical):
            return True
    return False

def remove_old(path, config=None):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    if os.path.exists(path):
        try:
            if os.path.isdir(path):
                shutil.rmtree(path)
                print(f"{Colors.YELLOW}üóë –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {path}{Colors.END}")
            else:
                os.remove(path)
                print(f"{Colors.YELLOW}üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {path}{Colors.END}")
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ–π
            if config and is_non_critical(path, config):
                print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}: {e}{Colors.END}")
                print(f"{Colors.CYAN}üí° –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è...{Colors.END}")
                # –ù–ï –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
            else:
                # –ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise e

def copy_new(src, dst, config=None):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    try:
        if os.path.isdir(src):
            # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º dirs_exist_ok
            if os.path.exists(dst):
                shutil.copytree(src, dst, dirs_exist_ok=True)
            else:
                shutil.copytree(src, dst)
            print(f"{Colors.GREEN}üìÅ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–ø–∫–∞: {dst}{Colors.END}")
        else:
            shutil.copy2(src, dst)
            print(f"{Colors.GREEN}üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª: {dst}{Colors.END}")
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–æ–π
        if config and is_non_critical(dst, config):
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {dst}: {e}{Colors.END}")
            print(f"{Colors.CYAN}üí° –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...{Colors.END}")
            # –ù–ï –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π
        else:
            # –ö—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise e

def create_backup(project_root, config, include_factory_configs=False):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
    import datetime
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = os.path.join(project_root, f"{config['backup']['dir_name']}_{timestamp}")
    
    print(f"{Colors.YELLOW}üóÇ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ {backup_dir}...{Colors.END}")
    
    os.makedirs(backup_dir, exist_ok=True)
    
    total_items = 0
    processed_items = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for item in os.listdir(project_root):
        if not is_excluded(item, config):
            if not include_factory_configs and is_factory_config(item, config):
                continue
            total_items += 1
    
    print(f"{Colors.CYAN}üìÅ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {total_items}{Colors.END}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
    for item in os.listdir(project_root):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏)
        if item.startswith(config['backup']['dir_name']):
            continue
            
        if is_excluded(item, config):
            continue
            
        if not include_factory_configs and is_factory_config(item, config):
            continue
            
        try:
            processed_items += 1
            print(f"{Colors.CYAN}üóÇ –ö–æ–ø–∏—Ä—É—é {processed_items}/{total_items}: {item}{Colors.END}")
            
            src_path = os.path.join(project_root, item)
            backup_path = os.path.join(backup_dir, item)
            
            if os.path.isdir(src_path):
                shutil.copytree(src_path, backup_path, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, backup_path)
        except Exception as e:
            print(f"{Colors.RED}‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item}: {e}{Colors.END}")
            continue
    
    print(f"{Colors.GREEN}‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {processed_items}/{total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤{Colors.END}")
    return backup_dir

def restore_backup(backup_dir, project_root, config):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    print(f"{Colors.YELLOW}‚è™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...{Colors.END}")
    
    errors = []
    
    if not os.path.exists(backup_dir):
        print(f"{Colors.RED}‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±—ç–∫–∞–ø: {backup_dir}{Colors.END}")
        return ["backup_dir_not_found"]
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞
    for item in os.listdir(backup_dir):
        try:
            backup_path = os.path.join(backup_dir, item)
            target_path = os.path.join(project_root, item)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            if is_excluded(item, config):
                print(f"{Colors.CYAN}‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π: {item}{Colors.END}")
                continue
            
            print(f"{Colors.CYAN}üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: {item}{Colors.END}")
            
            # –≠–¢–ê–ü 1: –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª/–ø–∞–ø–∫—É (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å)
            if os.path.exists(target_path):
                try:
                    if os.path.isdir(target_path):
                        shutil.rmtree(target_path)
                    else:
                        os.remove(target_path)
                    print(f"{Colors.YELLOW}üóë –£–¥–∞–ª–µ–Ω: {item}{Colors.END}")
                except Exception as e:
                    print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {item}: {e}{Colors.END}")
                    print(f"{Colors.CYAN}üí° –ü—Ä–æ–¥–æ–ª–∂–∞—é –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ...{Colors.END}")
            
            # –≠–¢–ê–ü 2: –ö–æ–ø–∏—Ä—É–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ (–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º)
            if os.path.isdir(backup_path):
                shutil.copytree(backup_path, target_path, dirs_exist_ok=True)
            else:
                shutil.copy2(backup_path, target_path)
            print(f"{Colors.GREEN}‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {item}{Colors.END}")
                
        except Exception as e:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {item}: {e}{Colors.END}")
            errors.append(item)
    
    return errors

def download_and_update(version_info, github_token, project_root, config, update_factory_configs=False):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç"""
    import tempfile
    import zipfile
    import requests
    
    print(f"{Colors.YELLOW}üì• –°–∫–∞—á–∏–≤–∞—é {version_info['name']} –≤–µ—Ä—Å–∏—é...{Colors.END}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    if github_token:
        headers = {"Authorization": f"token {github_token}"}
        print(f"{Colors.CYAN}üîë –ü–æ–¥–∫–ª—é—á–∞—é—Å—å —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è Pro –≤–µ—Ä—Å–∏–∏...{Colors.END}")
    else:
        headers = {}
        print(f"{Colors.CYAN}üîì –°–∫–∞—á–∏–≤–∞—é Base –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)...{Colors.END}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å GitHub
        repo_url = version_info['repo_url']
        branch = version_info['branch']
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_methods = [
            f"{repo_url}/archive/refs/heads/{branch}.zip",
            f"{repo_url}/releases/latest/download/source.zip",
        ]
        
        print(f"{Colors.CYAN}üîΩ –°–∫–∞—á–∏–≤–∞—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_url}{Colors.END}")
        print(f"{Colors.CYAN}   –í–µ—Ç–∫–∞: {branch}{Colors.END}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        response = None
        for i, zip_url in enumerate(download_methods, 1):
            print(f"{Colors.CYAN}   üîç –ú–µ—Ç–æ–¥ {i}: {zip_url}{Colors.END}")
            
            try:
                response = requests.get(zip_url, headers=headers)
                if response.status_code == 200:
                    print(f"{Colors.GREEN}   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç{Colors.END}")
                    break
                else:
                    print(f"{Colors.RED}   ‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}{Colors.END}")
            except Exception as e:
                print(f"{Colors.RED}   ‚ùå –û—à–∏–±–∫–∞: {e}{Colors.END}")
        
        if not response or response.status_code != 200:
            raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å")
            
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}{Colors.END}")
        raise
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    with tempfile.TemporaryDirectory() as tmpdir:
        zip_path = os.path.join(tmpdir, "repo.zip")
        with open(zip_path, "wb") as f:
            f.write(response.content)

        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(zip_path, 'r') as zip_ref:
            zip_ref.extractall(tmpdir)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
        repo_root = None
        for name in os.listdir(tmpdir):
            if os.path.isdir(os.path.join(tmpdir, name)) and name.endswith(f"-{branch}"):
                repo_root = os.path.join(tmpdir, name)
                break
        
        if not repo_root:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏!")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print(f"{Colors.YELLOW}‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏...{Colors.END}")
        non_critical_errors = []
        
        for item in os.listdir(repo_root):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if is_excluded(item, config):
                print(f"{Colors.CYAN}‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π: {item}{Colors.END}")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
            if not update_factory_configs and is_factory_config(item, config):
                print(f"{Colors.CYAN}‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥: {item}{Colors.END}")
                continue
            
            abs_old = os.path.join(project_root, item)
            abs_new = os.path.join(repo_root, item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if is_clean_sync_item(item, config):
                print(f"{Colors.YELLOW}üóë –ß–∏—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {item}{Colors.END}")
                remove_old(abs_old, config)
                copy_new(abs_new, abs_old, config)
            else:
                print(f"{Colors.CYAN}‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é: {item}{Colors.END}")
                remove_old(abs_old, config)
                copy_new(abs_new, abs_old, config)
        
        # –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if non_critical_errors:
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ù–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {', '.join(non_critical_errors)}{Colors.END}")
            print(f"{Colors.CYAN}üí° –≠—Ç–∏ –ø–∞–ø–∫–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ{Colors.END}")

def run_core_update():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    print(f"{Colors.GREEN}üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞...{Colors.END}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    project_root = get_project_root()
    script_path = os.path.abspath(__file__)
    script_dir = os.path.dirname(script_path)
    
    print(f"{Colors.CYAN}üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {project_root}{Colors.END}")
    print(f"{Colors.CYAN}üìÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑: {script_dir}{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    if is_running_in_container():
        print(f"{Colors.CYAN}üê≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ{Colors.END}")
        print(f"{Colors.GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ{Colors.END}")
    else:
        print(f"{Colors.CYAN}üñ• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Ö–æ—Å—Ç–µ{Colors.END}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --update, –∑–Ω–∞—á–∏—Ç –æ–Ω —É–∂–µ –≤ –∫–æ—Ä–Ω–µ
    if script_dir != project_root and "--update" not in sys.argv:
        # –≠–¢–ê–ü 1: –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Ç—É–¥–∞
        print(f"{Colors.CYAN}üß† –≠—Ç–∞–ø 1: –ö–æ–ø–∏—Ä—É—é —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞...{Colors.END}")
        
        root_script_path = os.path.join(project_root, "core_updater.py")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Ä–∞–∑–Ω—ã–µ (–∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–∫–∏ "same file")
            if os.path.abspath(script_path) != os.path.abspath(root_script_path):
                # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å
                shutil.copy2(script_path, root_script_path)
                print(f"{Colors.GREEN}‚úÖ –°–∫—Ä–∏–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ—Ä–µ–Ω—å: {root_script_path}{Colors.END}")
            else:
                print(f"{Colors.CYAN}üí° –°–∫—Ä–∏–ø—Ç —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º "update"
            print(f"{Colors.CYAN}üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞...{Colors.END}")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            sys.stdout.flush()
            sys.stderr.flush()
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
            result = subprocess.run([sys.executable, root_script_path, "--update"], cwd=project_root)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.returncode == 0:
                print(f"{Colors.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ{Colors.END}")
            else:
                print(f"{Colors.RED}‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode}){Colors.END}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–ø–∫—É tools/core)
            print(f"{Colors.CYAN}üîÑ –ó–∞–≤–µ—Ä—à–∞—é —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–æ—Å–≤–æ–±–æ–∂–¥–∞—é –ø–∞–ø–∫—É tools/core){Colors.END}")
            sys.exit(0)
            
        except Exception as e:
            print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏/–∑–∞–ø—É—Å–∫–µ: {e}{Colors.END}")
            print(f"{Colors.YELLOW}‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...{Colors.END}")
    
    # –≠–¢–ê–ü 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
    print(f"{Colors.CYAN}üß† –≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã –≤ –Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    sys.stdout.flush()
    sys.stderr.flush()
    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ==={Colors.END}")
    if not check_and_install_dependencies():
        print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.{Colors.END}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    available_versions = get_available_versions(config)
    print(f"{Colors.YELLOW}üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:{Colors.END}")
    for version in available_versions:
        version_info = get_version_info(version, config)
        print(f"  ‚Ä¢ {version.upper()}: {version_info['name']} - {version_info['description']}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    while True:
        selected_version = safe_input(f"\n{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({', '.join(available_versions)}): {Colors.END}").strip().lower()
        if validate_version(selected_version, config):
            break
        print(f"{Colors.RED}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_versions)}{Colors.END}")
    
    version_info = get_version_info(selected_version, config)
    print(f"\n{Colors.GREEN}‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_info['name']} ({version_info['description']}){Colors.END}")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    update_factory_configs = safe_input(f"\n{Colors.YELLOW}–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (config, resources)? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): {Colors.END}").strip().lower() == 'y'
    
    if update_factory_configs:
        print(f"{Colors.YELLOW}üõ† –í–∫–ª—é—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤!{Colors.END}")
    else:
        print(f"{Colors.CYAN}üìÅ –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ){Colors.END}")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_dir = create_backup(project_root, config)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
        github_token = get_github_token(version_info)
        
        if not github_token and version_info['update_token_env']:
            # Pro –≤–µ—Ä—Å–∏—è - –ø—Ä–æ–±—É–µ–º —Å —Ä—É—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
            print(f"{Colors.YELLOW}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è{Colors.END}")
            print(f"{Colors.CYAN}‚ÑπÔ∏è –ü—Ä–æ–±—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é...{Colors.END}")
            github_token = request_manual_token()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        download_and_update(version_info, github_token, project_root, config, update_factory_configs)
        
        print(f"{Colors.GREEN}‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!{Colors.END}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü: –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ==={Colors.END}")
        run_database_migration()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
        keep_backup = safe_input(f"\n{Colors.YELLOW}–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): {Colors.END}").strip().lower() == 'y'
        if keep_backup:
            shutil.rmtree(backup_dir)
            print(f"{Colors.GREEN}üóë –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞.{Colors.END}")
        else:
            print(f"{Colors.CYAN}üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}{Colors.END}")
        
        print(f"\n{Colors.GREEN}üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Colors.END}")
        print(f"{Colors.CYAN}üí° –í—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:{Colors.END}")
        print(f"{Colors.CYAN}   ‚úÖ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã{Colors.END}")
        print(f"{Colors.CYAN}   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞{Colors.END}")
        print(f"{Colors.CYAN}   ‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ{Colors.END}")
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}{Colors.END}")
        print(f"{Colors.YELLOW}‚è™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...{Colors.END}")
        
        errors = restore_backup(backup_dir, project_root, config)
        if errors:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏: {errors}{Colors.END}")
            print(f"{Colors.YELLOW}‚ùó –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {backup_dir}. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é!{Colors.END}")
        else:
            print(f"{Colors.GREEN}‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{Colors.END}")
            print(f"{Colors.CYAN}üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}{Colors.END}")
    
    finally:
        # –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–°–ï–ì–î–ê (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        print(f"\n{Colors.BLUE}=== –≠–¢–ê–ü: –û—á–∏—Å—Ç–∫–∞ ==={Colors.END}")
        remove_installer_script()

def main_menu():
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
    location = check_location()
    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    print(f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Colors.END}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞–ø–∫–∏
    if location == "core":
        print("1) ‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Coreness (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("2) ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ Coreness (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("3) –í—ã—Ö–æ–¥")
        
        while True:
            choice = safe_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")
            if choice == '1':
                print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä–≤–∏—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏–∑ –ø–∞–ø–∫–∏ tools/core!{Colors.END}")
                print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.{Colors.END}")
                confirm = safe_input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                if confirm.lower() == 'y':
                    run_initial_setup()
                break
            elif choice == '2':
                run_core_update()
                break
            elif choice == '3':
                print(f"{Colors.BLUE}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
                sys.exit(0)
            else:
                print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")
    else:
        print("1) ‚úÖ –ü–µ—Ä–≤–∏—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Coreness (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("2) ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ Coreness (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø)")
        print("3) –í—ã—Ö–æ–¥")
        
        while True:
            choice = safe_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ")
            if choice == '1':
                run_initial_setup()
                break
            elif choice == '2':
                print(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–¥—Ä–∞ –Ω–µ –∏–∑ –ø–∞–ø–∫–∏ tools/core!{Colors.END}")
                print(f"{Colors.YELLOW}   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.{Colors.END}")
                confirm = safe_input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
                if confirm.lower() == 'y':
                    run_core_update()
                break
            elif choice == '3':
                print(f"{Colors.BLUE}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}")
                sys.exit(0)
            else:
                print(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--update":
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –º–µ–Ω—é)
        print(f"{Colors.GREEN}üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–¥—Ä–∞ (–ø—Ä—è–º–æ–π —Ä–µ–∂–∏–º)...{Colors.END}")
        run_core_update()
    else:
        # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –º–µ–Ω—é
        main_menu()
