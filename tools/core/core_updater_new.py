#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import platform
import shutil
import subprocess
import time
from pathlib import Path

# –û–¢–ö–õ–Æ–ß–ê–ï–ú –ë–£–§–ï–†–ò–ó–ê–¶–ò–Æ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò
if hasattr(sys.stdout, 'reconfigure'):
    # Python 3.7+
    sys.stdout.reconfigure(line_buffering=True)
    sys.stderr.reconfigure(line_buffering=True)
else:
    # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Python
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1)  # line buffered
    sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
import io
import locale

try:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è UTF-8
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    os.environ['LC_ALL'] = 'C.UTF-8'
    os.environ['LANG'] = 'C.UTF-8'
    
    # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å UTF-8
    try:
        locale.setlocale(locale.LC_ALL, 'C.UTF-8')
    except:
        try:
            locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
        except:
            pass
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ —Å UTF-8
    if hasattr(sys.stdout, 'buffer'):
        sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    if hasattr(sys.stderr, 'buffer'):
        sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')
    if hasattr(sys.stdin, 'buffer'):
        sys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8', errors='replace')
        
except Exception as e:
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    os.environ['PYTHONIOENCODING'] = 'utf-8'
    pass

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
UPDATE_COUNTER = 0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
VERSIONS = {
    'base': {
        'name': "Base",
        'description': "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        #'repo_url': "https://github.com/Vensus137/Coreness",
        'repo_url': "https://github.com/Vensus137/alpha-test-01",
        'branch': "main",
        'update_token_env': None  # Base –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
    },
    'pro': {
        'name': "Pro", 
        'description': "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        'repo_url': "https://github.com/Vensus137/coreness-pro",
        'branch': "main",
        'update_token_env': "UPDATE_TOKEN_PRO"
    }
}

# –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è —á–∏—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è)
CLEAN_SYNC_ITEMS = [
    "plugins",              # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    "tools",                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    "app",                  # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "docker"                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
]

# –§–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)
ROOT_FILES = [
    "main.py",              # –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    "requirements.txt",     # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python
    "README.md",            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    "LICENSE_BASE",         # –õ–∏—Ü–µ–Ω–∑–∏—è Base –≤–µ—Ä—Å–∏–∏
    "LICENSE_PRO",          # –õ–∏—Ü–µ–Ω–∑–∏—è Pro –≤–µ—Ä—Å–∏–∏
    "env.example"           # –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
]

# –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)
FACTORY_CONFIGS = [
    "config/settings.yaml",
    "config/presets/default"
]

# –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è)
EXCLUDE_PATHS = [
    "logs",
    "data", 
    "resources",
    ".git",
    ".github",
    ".gitignore",
    ".core_update_backup*"  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–∞
BACKUP_CONFIG = {
    'default_keep': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±—ç–∫–∞–ø
    'dir_name': ".core_update_backup"
}

# –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
NON_CRITICAL_PATHS = [
    "tools",           # –í—Å—è –ø–∞–ø–∫–∞ tools (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
    "tools/core"       # –ü–∞–ø–∫–∞ core –≤–Ω—É—Ç—Ä–∏ tools (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
]

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class MessageHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ –∏ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        pass
    
    def print_output(self, message, color=None, flush=True):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏"""
        if color:
            message = f"{color}{message}{Colors.END}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ stdout –±–µ–∑ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
        sys.stdout.write(message)
        if flush:
            sys.stdout.flush()

    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.print_output(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}\n")
        self.print_output(f"{Colors.BLUE}{Colors.BOLD}      CORENESS UPDATER NEW      {Colors.END}\n")
        self.print_output(f"{Colors.BLUE}{Colors.BOLD}================================{Colors.END}\n")

    def safe_input(self, prompt):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–≤–æ–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
        try:
            # self.print_output(f"{Colors.CYAN}[DEBUG] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥: '{prompt}'{Colors.END}\n")
            self.print_output(prompt)
            result = input()
            # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            cleaned_result = result.strip()
            # self.print_output(f"{Colors.CYAN}[DEBUG] –ü–æ–ª—É—á–µ–Ω –≤–≤–æ–¥: '{result}' -> –æ—á–∏—â–µ–Ω: '{cleaned_result}'{Colors.END}\n")
            return cleaned_result
        except UnicodeDecodeError:
            # –ï—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
            self.print_output("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã):\n")
            try:
                result = input("> ")
                cleaned_result = result.strip()
                # self.print_output(f"{Colors.CYAN}[DEBUG] Unicode fallback: '{result}' -> '{cleaned_result}'{Colors.END}\n")
                return cleaned_result
            except:
                # self.print_output(f"{Colors.RED}[DEBUG] Unicode fallback failed{Colors.END}\n")
                return ""
        except Exception as e:
            # self.print_output(f"{Colors.RED}[DEBUG] –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}{Colors.END}\n")
            return ""

class DockerManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏"""
    
    def __init__(self, messages_handler, config, project_root, script_path):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Docker –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.messages = messages_handler
        self.config = config
        self.project_root = project_root
        self.script_path = script_path
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker"""
        self.messages.print_output(f"{Colors.YELLOW}üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker...{Colors.END}\n")
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        required_packages = [
            'requests',  # –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å GitHub
            'zipfile',    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
            'tempfile',   # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
            'shutil',     # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
            'subprocess'  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Python
        ]
        
        missing_packages = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞–∫–µ—Ç
        for package in required_packages:
            try:
                if package in ['zipfile', 'tempfile', 'shutil', 'subprocess']:
                    # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
                    __import__(package)
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ {package} (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å){Colors.END}\n")
                else:
                    # –í–Ω–µ—à–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
                    __import__(package)
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ {package} (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω){Colors.END}\n")
            except ImportError:
                if package not in ['zipfile', 'tempfile', 'shutil', 'subprocess']:
                    missing_packages.append(package)
                    self.messages.print_output(f"{Colors.RED}‚ùå {package} (–Ω–µ –Ω–∞–π–¥–µ–Ω){Colors.END}\n")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤–µ–∑–¥–µ)
        if missing_packages:
            self.messages.print_output(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}{Colors.END}\n")
            return self._install_packages(missing_packages)
        else:
            self.messages.print_output(f"{Colors.GREEN}‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}\n")
            return True
    
    def _install_packages(self, packages):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            self.messages.print_output(f"{Colors.CYAN}üîÑ –ü—Ä–æ–≤–µ—Ä—è—é pip...{Colors.END}\n")
            try:
                subprocess.run([sys.executable, "-m", "pip", "--version"], 
                             capture_output=True, text=True, check=True)
                self.messages.print_output(f"{Colors.GREEN}‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.END}\n")
            except:
                self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è pip –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é...{Colors.END}\n")
                try:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip —á–µ—Ä–µ–∑ get-pip.py
                    subprocess.run([
                        sys.executable, "-c", 
                        "import urllib.request; urllib.request.urlretrieve('https://bootstrap.pypa.io/get-pip.py', 'get-pip.py')"
                    ], check=True)
                    subprocess.run([sys.executable, "get-pip.py"], check=True)
                    subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], check=True)
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ pip —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}\n")
                except Exception as e:
                    self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pip: {e}{Colors.END}\n")
                    return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
            for package in packages:
                self.messages.print_output(f"{Colors.CYAN}üí° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...{Colors.END}\n")
                
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.END}\n")
                else:
                    self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}:{Colors.END}\n")
                    self.messages.print_output(f"{Colors.RED}   stdout: {result.stdout}{Colors.END}\n")
                    self.messages.print_output(f"{Colors.RED}   stderr: {result.stderr}{Colors.END}\n")
                    return False
            
            self.messages.print_output(f"{Colors.GREEN}üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}\n")
            return True
            
        except Exception as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}{Colors.END}\n")
            return False
    
    def check_docker(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ Docker –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
        try:
            result = subprocess.run(['docker', '--version'], 
                                  capture_output=True, text=True, check=True)
            self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}{Colors.END}\n")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            self.messages.print_output(f"{Colors.RED}‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.END}\n")
            return False
    
    def is_docker_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Docker –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –æ–Ω"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏—é, –Ω–æ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ daemon
            subprocess.run(['docker', 'info'], capture_output=True, check=True)
            return True
        except:
            return False
    
    def is_running_in_container(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–Ω—É—Ç—Ä–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        return os.path.exists("/.dockerenv")
    
    def is_container_running(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        # –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤—Å–µ–≥–¥–∞ "–¥–æ—Å—Ç—É–ø–µ–Ω"
        if self.is_running_in_container():
            return True
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ docker ps
            result = subprocess.run([
                "docker", "ps", "-q", "--filter", "name=coreness-container"
            ], capture_output=True, text=True)
            return bool(result.stdout.strip())
        except:
            return False
    
    def download_docker_config(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        self.messages.print_output(f"{Colors.YELLOW}üì• –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker...{Colors.END}\n")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        temp_dir = "docker-temp"
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL Base –≤–µ—Ä—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            base_repo_url = self.config['versions']['base']['repo_url']
            
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            self.messages.print_output(f"{Colors.CYAN}üí° –ö–ª–æ–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –∏–∑ Base —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...{Colors.END}\n")
            self.messages.print_output(f"{Colors.CYAN}   URL: {base_repo_url}{Colors.END}\n")
            
            # –°–Ω–∞—á–∞–ª–∞ –∫–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            subprocess.run([
                'git', 'clone', '--depth', '1', 
                '--filter=blob:none', 
                base_repo_url,
                temp_dir
            ], check=True)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º sparse-checkout –¥–ª—è –ø–∞–ø–∫–∏ docker
            subprocess.run([
                'git', 'sparse-checkout', 'init', '--cone'
            ], cwd=temp_dir, check=True)
            
            subprocess.run([
                'git', 'sparse-checkout', 'set', 'docker'
            ], cwd=temp_dir, check=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É docker –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
            docker_target = os.path.join(self.project_root, 'docker')
            if os.path.exists(docker_target):
                shutil.rmtree(docker_target)
            shutil.copytree(f'{temp_dir}/docker', docker_target)
            
            self.messages.print_output(f"{Colors.CYAN}üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤: {docker_target}{Colors.END}\n")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            try:
                shutil.rmtree(temp_dir)
            except PermissionError:
                # –ù–∞ Windows –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–æ–≤
                import stat
                def remove_readonly(func, path, exc):
                    if os.path.exists(path):
                        os.chmod(path, stat.S_IWRITE)
                        func(path)
                shutil.rmtree(temp_dir, onerror=remove_readonly)
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker —Å–∫–∞—á–∞–Ω–∞!{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}{Colors.END}\n")
            return False
    
    def install_docker(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ Docker
        if self.check_docker():
            if self.is_docker_running():
                self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!{Colors.END}\n")
                return True
            else:
                self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω{Colors.END}\n")
                self.messages.print_output(f"{Colors.CYAN}üí° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker...{Colors.END}\n")
                if self.start_docker_engine():
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –∑–∞–ø—É—â–µ–Ω!{Colors.END}\n")
                    return True
                else:
                    self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker{Colors.END}\n")
                    self.messages.print_output(f"{Colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Docker –≤—Ä—É—á–Ω—É—é{Colors.END}\n")
                    return False
        
        system = platform.system().lower()
        self.messages.print_output(f"{Colors.YELLOW}üîß –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}\n")
        
        if system == "linux":
            return self._install_docker_linux()
        elif system == "darwin":  # macOS
            return self._install_docker_macos()
        elif system == "windows":
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è Windows: Docker –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏{Colors.END}\n")
            self.messages.print_output(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏{Colors.END}\n")
            return False
        else:
            self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}{Colors.END}\n")
            return False
    
    def _install_docker_linux(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –¥–ª—è Linux"""
        self.messages.print_output(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è Linux...{Colors.END}\n")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ apt
            subprocess.run(['which', 'apt'], check=True, capture_output=True)
            self.messages.print_output(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º apt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}\n")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            subprocess.run([
                'sudo', 'apt', 'install', '-y', 
                'apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'lsb-release'
            ], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º GPG –∫–ª—é—á Docker
            subprocess.run(
                'curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg',
                shell=True, check=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
            subprocess.run(
                'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list',
                shell=True, check=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
            subprocess.run(['sudo', 'apt', 'update'], check=True)
            subprocess.run(['sudo', 'apt', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
            subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt!{Colors.END}\n")
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yum
                subprocess.run(['which', 'yum'], check=True, capture_output=True)
                self.messages.print_output(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º yum –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}\n")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                subprocess.run(['sudo', 'yum', 'install', '-y', 'yum-utils'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker
                subprocess.run(['sudo', 'yum-config-manager', '--add-repo', 'https://download.docker.com/linux/centos/docker-ce.repo'], check=True)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
                subprocess.run(['sudo', 'yum', 'install', '-y', 'docker-ce', 'docker-ce-cli', 'containerd.io'], check=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º Docker
                subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
                subprocess.run(['sudo', 'systemctl', 'enable', 'docker'], check=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
                subprocess.run(['sudo', 'usermod', '-aG', 'docker', os.getenv('USER')], check=True)
                
                self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ yum!{Colors.END}\n")
                self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã docker!{Colors.END}\n")
                return True
                
            except subprocess.CalledProcessError:
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä!{Colors.END}\n")
                return False
    
    def _install_docker_macos(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Docker Engine –¥–ª—è macOS"""
        self.messages.print_output(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine –¥–ª—è macOS...{Colors.END}\n")
        self.messages.print_output(f"{Colors.CYAN}üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º Homebrew –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Engine...{Colors.END}\n")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Homebrew
            subprocess.run(['which', 'brew'], check=True, capture_output=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Engine —á–µ—Ä–µ–∑ Homebrew
            subprocess.run(['brew', 'install', 'docker'], check=True)
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker Engine —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew!{Colors.END}\n")
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Engine: brew services start docker{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError:
            self.messages.print_output(f"{Colors.RED}‚ùå Homebrew –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Homebrew –∏–ª–∏ Docker Desktop –≤—Ä—É—á–Ω—É—é.{Colors.END}\n")
            return False
    
    def install_global_commands(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ docker/coreness"""
        self.messages.print_output(f"{Colors.YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã...{Colors.END}\n")
        
        coreness_script = os.path.join(self.project_root, 'docker', 'coreness')
        if not os.path.exists(coreness_script):
            self.messages.print_output(f"{Colors.RED}‚ùå –°–∫—Ä–∏–ø—Ç coreness –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.END}\n")
            return False
        
        try:
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
            os.chmod(coreness_script, 0o755)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
            self.messages.print_output(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥...{Colors.END}\n")
            result = subprocess.run([coreness_script, 'install'], 
                                 capture_output=True, text=True, check=True)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if result.stdout:
                self.messages.print_output(f"{Colors.GREEN}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:{Colors.END}\n")
                self.messages.print_output(result.stdout)
            
            # –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ 'coreness' (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–ø—Ç)
            self.messages.print_output(f"{Colors.GREEN}‚úÖ –ö–æ–º–∞–Ω–¥–∞ 'coreness' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞{Colors.END}\n")
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}{Colors.END}\n")
            if e.stdout:
                self.messages.print_output(f"{Colors.RED}stdout: {e.stdout}{Colors.END}\n")
            if e.stderr:
                self.messages.print_output(f"{Colors.RED}stderr: {e.stderr}{Colors.END}\n")
            return False
        except Exception as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥: {e}{Colors.END}\n")
            return False

    def build_and_run_container(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        self.messages.print_output(f"{Colors.YELLOW}üî® –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}\n")
        
        docker_dir = os.path.join(self.project_root, 'docker')
        if not os.path.exists(docker_dir):
            self.messages.print_output(f"{Colors.RED}‚ùå –ü–∞–ø–∫–∞ docker –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Colors.END}\n")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if not self.is_docker_running():
            self.messages.print_output(f"{Colors.RED}‚ùå Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!{Colors.END}\n")
            self.messages.print_output(f"{Colors.CYAN}üí° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker...{Colors.END}\n")
            
            if self.start_docker_engine():
                self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –∑–∞–ø—É—â–µ–Ω!{Colors.END}\n")
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Docker —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
                self.messages.print_output(f"{Colors.YELLOW}‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker...{Colors.END}\n")
                time.sleep(5)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if self.is_docker_running():
                    self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!{Colors.END}\n")
                else:
                    self.messages.print_output(f"{Colors.RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è.{Colors.END}\n")
                    self.messages.print_output(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}\n")
                    return False
            else:
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.{Colors.END}\n")
                self.messages.print_output(f"{Colors.YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}\n")
                return False
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
            self.messages.print_output(f"{Colors.CYAN}üí° –°–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑...{Colors.END}\n")
            subprocess.run(['docker', 'compose', 'build'], check=True, cwd=docker_dir)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.messages.print_output(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}\n")
            subprocess.run(['docker', 'compose', 'up', '-d'], check=True, cwd=docker_dir)
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω!{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ/–∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}{Colors.END}\n")
            return False
    
    def start_docker_engine(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker Engine"""
        try:
            system = platform.system()
            
            if system == "Windows":
                self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è Windows: Docker –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏{Colors.END}\n")
                self.messages.print_output(f"{Colors.CYAN}üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Docker —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏{Colors.END}\n")
                return False
                
            elif system == "Darwin":  # macOS
                self.messages.print_output(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ macOS...{Colors.END}\n")
                # –ù–∞ macOS Docker Engine —á–µ—Ä–µ–∑ Homebrew
                try:
                    subprocess.run(['brew', 'services', 'start', 'docker'], check=True)
                    return True
                except:
                    # Fallback –Ω–∞ Docker Desktop
                    try:
                        subprocess.run(['open', '-a', 'Docker'], check=True)
                        return True
                    except:
                        return False
                
            elif system == "Linux":
                self.messages.print_output(f"{Colors.CYAN}üí° –ó–∞–ø—É—Å–∫–∞–µ–º Docker Engine –Ω–∞ Linux...{Colors.END}\n")
                # –ù–∞ Linux Docker Engine –∫–∞–∫ —Å–µ—Ä–≤–∏—Å
                subprocess.run(['sudo', 'systemctl', 'start', 'docker'], check=True)
                return True
                
            else:
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: {system}{Colors.END}\n")
                return False
                
        except subprocess.CalledProcessError:
            self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker Engine{Colors.END}\n")
            return False
        except Exception as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker Engine: {e}{Colors.END}\n")
            return False
    
    def remove_container(self):
        """–£–¥–∞–ª—è–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
        self.messages.print_output(f"{Colors.YELLOW}üóë –£–¥–∞–ª—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...{Colors.END}\n")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
            running_result = subprocess.run(['docker', 'ps', '-q'], capture_output=True, text=True)
            if running_result.stdout.strip():
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                self.messages.print_output(f"{Colors.CYAN}üí° –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...{Colors.END}\n")
                subprocess.run('docker stop $(docker ps -q)', shell=True, check=True)
            else:
                self.messages.print_output(f"{Colors.CYAN}üí° –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤{Colors.END}\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            all_containers_result = subprocess.run(['docker', 'ps', '-aq'], capture_output=True, text=True)
            if all_containers_result.stdout.strip():
                # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                self.messages.print_output(f"{Colors.CYAN}üí° –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...{Colors.END}\n")
                subprocess.run('docker rm $(docker ps -aq)', shell=True, check=True)
            else:
                self.messages.print_output(f"{Colors.CYAN}üí° –ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è{Colors.END}\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–∑—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            images_result = subprocess.run(['docker', 'images', '-q'], capture_output=True, text=True)
            if images_result.stdout.strip():
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑—ã
                self.messages.print_output(f"{Colors.CYAN}üí° –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–∑—ã...{Colors.END}\n")
                subprocess.run('docker rmi $(docker images -q)', shell=True, check=True)
            else:
                self.messages.print_output(f"{Colors.CYAN}üí° –ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è{Colors.END}\n")
            
            self.messages.print_output(f"{Colors.GREEN}‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã!{Colors.END}\n")
            return True
            
        except subprocess.CalledProcessError as e:
            self.messages.print_output(f"{Colors.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}{Colors.END}\n")
            return False

class CoreUpdater:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Coreness"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞"""
        self.update_counter = 0
        self.script_path, self.project_root = self._get_paths()
        self.config = self._load_config()
        self.messages = MessageHandler()
        self.docker = DockerManager(self.messages, self.config, self.project_root, self.script_path)
        
    def _get_paths(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç—É –∏ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞"""
        script_path = Path(__file__).resolve()
        script_dir = script_path.parent
        
        # –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ tools/core, —Ç–æ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ 2 —É—Ä–æ–≤–Ω—è –≤—ã—à–µ
        if script_dir.name == "core" and script_dir.parent.name == "tools":
            project_root = script_dir.parent.parent
        else:
            # –ò–Ω–∞—á–µ —Å–∫—Ä–∏–ø—Ç —É–∂–µ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            project_root = script_dir
            
        return script_path, project_root
    
    def is_in_project_root(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        return self.script_path.parent == self.project_root
    
    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return {
            'versions': VERSIONS,
            'clean_sync_items': CLEAN_SYNC_ITEMS,
            'root_files': ROOT_FILES,
            'factory_configs': FACTORY_CONFIGS,
            'exclude_paths': EXCLUDE_PATHS,
            'backup': BACKUP_CONFIG,
            'non_critical_paths': NON_CRITICAL_PATHS
        }

    def check_location(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ø–∫—É –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        self.messages.print_output(f"{Colors.CYAN}üìÅ –°–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {self.script_path.parent}{Colors.END}\n")
        self.messages.print_output(f"{Colors.CYAN}üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {Path.cwd()}{Colors.END}\n")
        self.messages.print_output(f"{Colors.CYAN}üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}{Colors.END}\n")
        
        return self.is_in_project_root()

    def _show_menu_options(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –º–µ–Ω—é"""
        self.messages.print_output("1) üê≥ –†–∞–±–æ—Ç–∞ —Å Docker\n")
        self.messages.print_output("2) üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n")
        self.messages.print_output("3) üóÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n")
        self.messages.print_output("0) –í—ã—Ö–æ–¥\n")

    def _show_docker_submenu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker"""
        self.messages.print_output(f"{Colors.BLUE}=== –†–ê–ë–û–¢–ê –° DOCKER ==={Colors.END}\n")
        self.messages.print_output("1) üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\n")
        self.messages.print_output("2) üóë –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞\n")
        self.messages.print_output("0) –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n")

    def _handle_docker_choice(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –ø–æ–¥–º–µ–Ω—é Docker"""
        if choice == '1':
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            self.messages.print_output(f"{Colors.BLUE}=== –£–°–¢–ê–ù–û–í–ö–ê/–û–ë–ù–û–í–õ–ï–ù–ò–ï DOCKER ==={Colors.END}\n")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if not self.docker.check_dependencies():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏{Colors.END}\n")
                return True
            
            # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
            if not self.docker.install_docker():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker{Colors.END}\n")
                return True
            
            # 3. –°–∫–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.docker.download_docker_config():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker{Colors.END}\n")
                return True
            
            # 4. –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if not self.docker.build_and_run_container():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å/–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä{Colors.END}\n")
                return True
            
            # 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if not self.docker.install_global_commands():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã{Colors.END}\n")
                return True
            
            self.messages.print_output(f"{Colors.GREEN}üéâ Docker, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!{Colors.END}\n")
            return True
            
        elif choice == '2':
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            self.messages.print_output(f"{Colors.BLUE}=== –£–î–ê–õ–ï–ù–ò–ï DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–ê ==={Colors.END}\n")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            confirm = self.messages.safe_input(f"{Colors.YELLOW}‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): {Colors.END}")
            if confirm.lower() != 'y':
                self.messages.print_output(f"{Colors.CYAN}üí° –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ{Colors.END}\n")
                return True
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if not self.docker.remove_container():
                self.messages.print_output(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä{Colors.END}\n")
                return True
            
            self.messages.print_output(f"{Colors.GREEN}üéâ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã!{Colors.END}\n")
            return True
            
        elif choice == '0':
            return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            self.messages.print_output(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}\n")
            return False

    def _handle_menu_choice(self, choice):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
        if choice == '1':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é Docker
            while True:
                self._show_docker_submenu()
                docker_choice = self.messages.safe_input(f"{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-2): {Colors.END}")
                if self._handle_docker_choice(docker_choice):
                    if docker_choice == '0':
                        break  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    else:
                        break  # –í—ã–ø–æ–ª–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ
            return True
        elif choice == '2':
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –ó–∞–≥–ª—É—à–∫–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö{Colors.END}\n")
            return True
        elif choice == '3':
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –ó–∞–≥–ª—É—à–∫–∞: –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö{Colors.END}\n")
            return True
        elif choice == '0':
            self.messages.print_output(f"{Colors.BLUE}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!{Colors.END}\n")
            sys.exit(0)
        else:
            self.messages.print_output(f"{Colors.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.{Colors.END}\n")
            return False

    def main_menu(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.messages.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        is_root = self.check_location()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
        if is_root:
            self.messages.print_output(f"{Colors.YELLOW}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞!{Colors.END}\n")
            self.messages.print_output(f"{Colors.YELLOW}   –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ.{Colors.END}\n")
            self.messages.print_output(f"{Colors.YELLOW}   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Coreness.{Colors.END}\n")
            self.messages.print_output(f"{Colors.CYAN}üí° –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫—É tools/core{Colors.END}\n")
        
        self.messages.print_output(f"{Colors.YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:{Colors.END}\n")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –º–µ–Ω—é (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤)
        self._show_menu_options()
        
        # –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞
        while True:
            choice = self.messages.safe_input(f"{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-3): {Colors.END}")
            if self._handle_menu_choice(choice):
                break

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
    updater = CoreUpdater()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    updater.main_menu()
