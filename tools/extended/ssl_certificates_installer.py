#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç

–°–∫–∞—á–∏–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –ø—Ä—è–º–æ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

import os
import sys
import platform
import subprocess
import urllib.request
import ssl
import socket
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from plugins.utilities.foundation.settings_manager.settings_manager import SettingsManager
    from plugins.utilities.foundation.logger.logger import Logger
    from plugins.utilities.foundation.plugins_manager.plugins_manager import PluginsManager
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class SSLCertificatesInstaller:
    """–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.cert_urls = {
            'sub_ca': 'https://gu-st.ru/content/lending/russian_trusted_sub_ca.zip',
            'root_ca': 'https://gu-st.ru/content/lending/windows_russian_trusted_root_ca.zip'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.logger = Logger()
        self.plugins_manager = PluginsManager(logger=self.logger)
        self.settings_manager = SettingsManager(logger=self.logger, plugins_manager=self.plugins_manager)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        self.project_root = self._get_project_root()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ settings_manager
        ssl_certs_relative_path = self.settings_manager.get_ssl_certificates_path()
        self.certs_dir = self.project_root / ssl_certs_relative_path
        self.certs_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—É—Ç—å –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ settings_manager
        self.combined_certs_path = Path(self.settings_manager.get_ssl_certificate_path())
    
    def _get_project_root(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ –∏–∑ settings_manager"""
        return Path(self.settings_manager.get_project_root())
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ç–∏–ª–∏—Ç—ã"""
        print("üîê –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç")
        print("=" * 60)
        print(f"–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")
        print(f"Python: {sys.version}")
        print(f"–ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        print(f"–ü–∞–ø–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {self.certs_dir}")
        print()
    
    def download_certificates(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç...")
        
        downloaded_files = []
        
        for cert_type, url in self.cert_urls.items():
            zip_path = self.certs_dir / f"russian_trusted_{cert_type}.zip"
            
            try:
                print(f"  –°–∫–∞—á–∏–≤–∞—é {cert_type}...")
                urllib.request.urlretrieve(url, zip_path)
                print(f"  ‚úÖ {cert_type} —Å–∫–∞—á–∞–Ω: {zip_path}")
                
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
                extract_dir = self.certs_dir / cert_type
                extract_dir.mkdir(exist_ok=True)
                
                import zipfile
                with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
                
                # –ò—â–µ–º .cer —Ñ–∞–π–ª—ã –≤ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–º –∞—Ä—Ö–∏–≤–µ
                cer_files = list(extract_dir.glob("*.cer"))
                if cer_files:
                    downloaded_files.extend(cer_files)
                    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(cer_files)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ {cert_type}")
                else:
                    print(f"  ‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {cert_type}")
                    
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ .cer —Ñ–∞–π–ª—ã –∏–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∞–ø–æ–∫
                for subdir in extract_dir.iterdir():
                    if subdir.is_dir():
                        sub_cer_files = list(subdir.glob("*.cer"))
                        if sub_cer_files:
                            downloaded_files.extend(sub_cer_files)
                            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(sub_cer_files)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ {subdir.name}")
                    
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {cert_type}: {e}")
                return False
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        if self._create_combined_cert_file(downloaded_files):
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {self.combined_certs_path}")
        
        return True
    
    def _create_combined_cert_file(self, cert_files):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        try:
            with open(self.combined_certs_path, 'w', encoding='utf-8') as combined_file:
                for cert_file in cert_files:
                    # –ß–∏—Ç–∞–µ–º .cer —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π (–æ–Ω —É–∂–µ –≤ PEM —Ñ–æ—Ä–º–∞—Ç–µ)
                    try:
                        with open(cert_file, 'r', encoding='utf-8') as f:
                            cert_content = f.read()
                    except UnicodeDecodeError:
                        # –ï—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
                        with open(cert_file, 'r', encoding='latin-1') as f:
                            cert_content = f.read()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    combined_file.write(cert_content)
                    combined_file.write('\n')  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {self.combined_certs_path}")
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def install_windows(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ Windows Certificate Store"""
        print("üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ Windows Certificate Store...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            import ctypes
            is_admin = ctypes.windll.shell32.IsUserAnAdmin()
            
            if not is_admin:
                print("  ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
                print("  –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
                print(f"  python {sys.argv[0]}")
                print()
                print("  –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ MMC")
                return False
        except:
            pass
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ certutil
        success = False
        for cert_type in ['sub_ca', 'root_ca']:
            cert_dir = self.certs_dir / cert_type
            if cert_dir.exists():
                for cert_file in cert_dir.glob("*.cer"):
                    try:
                        print(f"  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {cert_file.name}...")
                        result = subprocess.run(
                            ['certutil', '-addstore', '-f', 'ROOT', str(cert_file)],
                            capture_output=True,
                            text=True,
                            check=True
                        )
                        print(f"  ‚úÖ {cert_file.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        success = True
                    except subprocess.CalledProcessError as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {cert_file.name}: {e}")
        
        return success
    
    def install_ubuntu(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ Ubuntu/Debian"""
        print("üêß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ Ubuntu/Debian...")
        
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–ø–∫—É
            for cert_file in self.certs_dir.glob("russian_trusted_*.pem"):
                system_cert_path = f"/usr/local/share/ca-certificates/{cert_file.stem}.crt"
                
                print(f"  –ö–æ–ø–∏—Ä—É—é {cert_file.name} –≤ {system_cert_path}...")
                shutil.copy2(cert_file, system_cert_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            print("  –û–±–Ω–æ–≤–ª—è—é –±–∞–∑—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
            subprocess.run(['sudo', 'update-ca-certificates'], check=True)
            
            print("  ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
            return True
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False
    
    def test_ssl_connection(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ —Å–µ—Ä–≤–µ—Ä–∞–º–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        test_hosts = [
            ('smartspeech.sber.ru', 443),
            ('ngw.devices.sberbank.ru', 9443),
        ]
        
        all_success = True
        
        for hostname, port in test_hosts:
            print(f"  –¢–µ—Å—Ç–∏—Ä—É—é {hostname}:{port}...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–∞—à–∏–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
                context = ssl.create_default_context()
                if self.combined_certs_path.exists():
                    context.load_verify_locations(cafile=str(self.combined_certs_path))
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                with socket.create_connection((hostname, port), timeout=10) as sock:
                    with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                        cert = ssock.getpeercert()
                        print(f"  ‚úÖ {hostname}:{port} - SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                        print(f"     –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert['subject']}")
            except ssl.SSLCertVerificationError as e:
                print(f"  ‚ùå {hostname}:{port} - SSL –æ—à–∏–±–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
                all_success = False
            except Exception as e:
                print(f"  ‚ùå {hostname}:{port} - –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                all_success = False
        
        return all_success
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        try:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
            
            # –£–¥–∞–ª—è–µ–º ZIP –∞—Ä—Ö–∏–≤—ã
            for cert_type in ['sub_ca', 'root_ca']:
                zip_path = self.certs_dir / f"russian_trusted_{cert_type}.zip"
                if zip_path.exists():
                    zip_path.unlink()
                    print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω: {zip_path.name}")
            
            # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ —Å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
            for cert_type in ['sub_ca', 'root_ca']:
                cert_dir = self.certs_dir / cert_type
                if cert_dir.exists():
                    shutil.rmtree(cert_dir)
                    print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {cert_type}/")
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (–±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω)
            config_path = self.certs_dir / 'ssl_config.py'
            if config_path.exists():
                config_path.unlink()
                print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω: ssl_config.py")
            
            print("  ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def install(self, force=False):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
        self.print_header()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —É–∂–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        if not force and self.combined_certs_path.exists():
            print("‚ÑπÔ∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ")
            print(f"   –ü—É—Ç—å: {self.combined_certs_path}")
            
            if self.test_ssl_connection():
                print("‚úÖ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        if not self.download_certificates():
            print("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
            return False
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ —Å–∏—Å—Ç–µ–º—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.system == 'windows':
            self.install_windows()
        elif self.system == 'linux':
            self.install_ubuntu()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.test_ssl_connection():
            print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
            return True
        else:
            print("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Python/IDE")
            return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
    parser.add_argument('--test-only', action='store_true', help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏')
    parser.add_argument('--force', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞')
    
    args = parser.parse_args()
    
    installer = SSLCertificatesInstaller()
    
    if args.test_only:
        print("üß™ –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        installer.test_ssl_connection()
    else:
        installer.install(force=args.force)
    
    installer.cleanup()


if __name__ == "__main__":
    main() 