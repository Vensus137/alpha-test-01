#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∏—Å—Ç–µ–º—ã
–¢–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"""

import asyncio
import time
import psutil
from typing import Dict, Any, List, Optional
from datetime import datetime

class ServerAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è TaskManager"""
    
    def __init__(self):
        self.results = {
            'system_info': {},
            'performance_tests': [],
            'recommendations': {},
            'analysis_time': datetime.now().isoformat()
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.colors = {
            'header': '\033[95m',
            'success': '\033[92m',
            'warning': '\033[93m',
            'error': '\033[91m',
            'info': '\033[94m',
            'end': '\033[0m'
        }
    
    def print_header(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print(f"\n{self.colors['header']}{'='*60}")
        print(f"{text:^60}")
        print(f"{'='*60}{self.colors['end']}")
    
    def print_success(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        print(f"{self.colors['success']}‚úÖ {text}{self.colors['end']}")
    
    def print_warning(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        print(f"{self.colors['warning']}‚ö†Ô∏è {text}{self.colors['end']}")
    
    def print_error(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—à–∏–±–∫—É"""
        print(f"{self.colors['error']}‚ùå {text}{self.colors['end']}")
    
    def print_info(self, text: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        print(f"{self.colors['info']}‚ÑπÔ∏è {text}{self.colors['end']}")
    
    def get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        print(f"\n{self.colors['info']}üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É...{self.colors['end']}")
        
        # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_info = {
            'cores_physical': psutil.cpu_count(logical=False),
            'cores_logical': psutil.cpu_count(logical=True),
            'max_frequency': psutil.cpu_freq().max if psutil.cpu_freq() else 0,
            'current_frequency': psutil.cpu_freq().current if psutil.cpu_freq() else 0,
            'usage_percent': psutil.cpu_percent(interval=1)
        }
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        memory_info = {
            'total_gb': memory.total / (1024**3),
            'available_gb': memory.available / (1024**3),
            'used_gb': memory.used / (1024**3),
            'percent': memory.percent,
            'free_gb': memory.free / (1024**3)
        }
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        disk_info = {
            'total_gb': disk.total / (1024**3),
            'free_gb': disk.free / (1024**3),
            'used_gb': disk.used / (1024**3),
            'percent': (disk.used / disk.total) * 100
        }
        
        # –°–µ—Ç—å
        network_info = {
            'connections': len(psutil.net_connections()),
            'interfaces': len(psutil.net_if_addrs())
        }
        
        system_info = {
            'cpu': cpu_info,
            'memory': memory_info,
            'disk': disk_info,
            'network': network_info,
            'platform': {
                'system': psutil.UNIX if hasattr(psutil, 'UNIX') else 'Windows',
                'python_version': f"{psutil.sys.version_info.major}.{psutil.sys.version_info.minor}"
            }
        }
        
        self.results['system_info'] = system_info
        return system_info
    
    def display_system_info(self, system_info: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        self.print_header("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
        
        cpu = system_info['cpu']
        memory = system_info['memory']
        disk = system_info['disk']
        
        print(f"\nüñ•Ô∏è –ü–†–û–¶–ï–°–°–û–†:")
        print(f"   –§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞: {cpu['cores_physical']}")
        print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞: {cpu['cores_logical']}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu['max_frequency']:.0f} MHz")
        print(f"   –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {cpu['current_frequency']:.0f} MHz")
        print(f"   –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {cpu['usage_percent']:.1f}%")
        
        print(f"\nüíæ –ü–ê–ú–Ø–¢–¨:")
        print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {memory['total_gb']:.1f} GB")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {memory['available_gb']:.1f} GB")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {memory['used_gb']:.1f} GB ({memory['percent']:.1f}%)")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {memory['free_gb']:.1f} GB")
        
        print(f"\nüíø –î–ò–°–ö:")
        print(f"   –û–±—â–∏–π –æ–±—ä–µ–º: {disk['total_gb']:.1f} GB")
        print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {disk['free_gb']:.1f} GB")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {disk['used_gb']:.1f} GB ({disk['percent']:.1f}%)")
        
        print(f"\nüåê –°–ï–¢–¨:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {system_info['network']['connections']}")
        print(f"   –°–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {system_info['network']['interfaces']}")
    
    async def run_performance_test(self, test_name: str, max_concurrent: int, 
                                 task_count: int, test_duration: float = 2.0) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print(f"\nüß™ –¢–µ—Å—Ç: {test_name} (–ª–∏–º–∏—Ç: {max_concurrent}, –∑–∞–¥–∞—á: {task_count})")
        
        # –ò–∑–º–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –¥–æ —Ç–µ—Å—Ç–∞
        cpu_before = psutil.cpu_percent()
        memory_before = psutil.virtual_memory().percent
        
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        semaphore = asyncio.Semaphore(max_concurrent)
        
        async def test_task(task_id: int):
            async with semaphore:
                import random
                
                # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                task_type = task_id % 5
                
                if task_type == 0:
                    # Critical –∑–∞–¥–∞—á–∞ - –±—ã—Å—Ç—Ä–∞—è, –Ω–æ –≤–∞–∂–Ω–∞—è (API, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è)
                    await asyncio.sleep(0.01)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ç–∏
                    data = [random.randint(1, 100) for _ in range(100)]
                    result = sum(data)
                    if result > 5000:
                        processed = [x for x in data if x > 50]
                    else:
                        processed = data
                    
                elif task_type == 1:
                    # High –∑–∞–¥–∞—á–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                    await asyncio.sleep(0.05)  # –£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ I/O
                    user_data = [random.randint(1, 1000) for _ in range(500)]
                    processed = [x * 2 for x in user_data if x % 2 == 0]
                    processed.sort()
                    filtered = [x for x in processed if x > 100]
                    
                elif task_type == 2:
                    # Medium –∑–∞–¥–∞—á–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    data = [random.random() for _ in range(2000)]
                    data.sort()
                    mean = sum(data) / len(data)
                    variance = sum((x - mean) ** 2 for x in data) / len(data)
                    groups = {}
                    for i, value in enumerate(data):
                        group = int(value * 10)
                        if group not in groups:
                            groups[group] = []
                        groups[group].append(i)
                    
                elif task_type == 3:
                    # Low –∑–∞–¥–∞—á–∞ - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    await asyncio.sleep(0.2)  # –î–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª)
                    logs = [f"Log entry {i}: {random.randint(1, 1000)}" for i in range(1000)]
                    stats = {}
                    for log in logs:
                        key = log.split(':')[0]
                        if key not in stats:
                            stats[key] = 0
                        stats[key] += 1
                    report = {k: v for k, v in stats.items() if v > 10}
                    
                else:
                    # Heavy –∑–∞–¥–∞—á–∞ - ML, –∞–Ω–∞–ª–∏–∑, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
                    await asyncio.sleep(0.02)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ CPU/Memory
                    matrix_a = [[random.random() for _ in range(100)] for _ in range(100)]
                    matrix_b = [[random.random() for _ in range(100)] for _ in range(100)]
                    result_matrix = [[0 for _ in range(100)] for _ in range(100)]
                    for i in range(100):
                        for j in range(100):
                            for k in range(100):
                                result_matrix[i][j] += matrix_a[i][k] * matrix_b[k][j]
                    eigenvalues = []
                    for row in result_matrix:
                        eigenvalues.append(sum(row))
                    eigenvalues.sort()
                    filtered_eigenvalues = [x for x in eigenvalues if x > 50]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks = [test_task(i) for i in range(task_count)]
        await asyncio.gather(*tasks)
        
        end_time = time.time()
        duration = end_time - start_time
        
        # –ò–∑–º–µ—Ä—è–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
        cpu_after = psutil.cpu_percent()
        memory_after = psutil.virtual_memory().percent
        
        result = {
            'test_name': test_name,
            'max_concurrent': max_concurrent,
            'task_count': task_count,
            'duration': duration,
            'tasks_per_second': task_count / duration,
            'cpu_before': cpu_before,
            'cpu_after': cpu_after,
            'cpu_delta': cpu_after - cpu_before,
            'memory_before': memory_before,
            'memory_after': memory_after,
            'memory_delta': memory_after - memory_before,
            'efficiency_score': (task_count / duration) / max_concurrent
        }
        
        self.results['performance_tests'].append(result)
        
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}—Å")
        print(f"   üìä –ó–∞–¥–∞—á –≤ —Å–µ–∫—É–Ω–¥—É: {result['tasks_per_second']:.1f}")
        print(f"   üî• CPU: {cpu_before:.1f}% ‚Üí {cpu_after:.1f}% (Œî{cpu_after-cpu_before:+.1f}%)")
        print(f"   üíæ RAM: {memory_before:.1f}% ‚Üí {memory_after:.1f}% (Œî{memory_after-memory_before:+.1f}%)")
        print(f"   üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {result['efficiency_score']:.2f}")
        
        return result
    
    async def run_basic_performance_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã
        test_scenarios = [
            ("Critical Queue", 5, 10),
            ("High Priority Queue", 8, 16),
            ("Medium Priority Queue", 12, 24),
            ("Low Priority Queue", 6, 12),
            ("Heavy Tasks", 3, 6),
        ]
        
        for test_name, limit, task_count in test_scenarios:
            await self.run_performance_test(test_name, limit, task_count, 1.0)
            await asyncio.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    def calculate_recommendations(self) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Å—Ç–æ–≤"""
        system_info = self.results['system_info']
        tests = self.results['performance_tests']
        
        cpu_cores = system_info['cpu']['cores_physical']
        memory_gb = system_info['memory']['total_gb']
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        best_performances = {}
        cpu_load_analysis = []
        
        for test in tests:
            queue_type = test['test_name'].split()[0].lower()
            if queue_type not in best_performances:
                best_performances[queue_type] = test
            elif test['efficiency_score'] > best_performances[queue_type]['efficiency_score']:
                best_performances[queue_type] = test
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–≥—Ä—É–∑–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            cpu_load_analysis.append({
                'limit': test['max_concurrent'],
                'cpu_delta': test['cpu_delta'],
                'memory_delta': test['memory_delta'],
                'queue_type': queue_type
            })
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        avg_cpu_delta = sum(t['cpu_delta'] for t in cpu_load_analysis) / len(cpu_load_analysis)
        avg_memory_delta = sum(t['memory_delta'] for t in cpu_load_analysis) / len(cpu_load_analysis)
        
        # –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
        if avg_cpu_delta < 5:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –º–æ–∂–Ω–æ —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
            conservative_factor = 3.0   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π - –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ
            optimal_factor = 6.0        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π - –≤ 6 —Ä–∞–∑ –±–æ–ª—å—à–µ
            aggressive_factor = 12.0    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –≤ 12 —Ä–∞–∑ –±–æ–ª—å—à–µ!
        elif avg_cpu_delta < 10:  # –ù–∏–∑–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            conservative_factor = 2.5
            optimal_factor = 5.0
            aggressive_factor = 10.0
        elif avg_cpu_delta > 30:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            conservative_factor = 1.5
            optimal_factor = 3.0
            aggressive_factor = 6.0
        elif avg_cpu_delta > 20:  # –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            conservative_factor = 2.0
            optimal_factor = 4.0
            aggressive_factor = 8.0
        else:  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
            conservative_factor = 2.5
            optimal_factor = 5.0
            aggressive_factor = 10.0
        
        # –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
        recommendations = {
            'global_limit': {
                'conservative': int(cpu_cores * 15 * conservative_factor),   # 6 * 15 * 3.0 = 270
                'optimal': int(cpu_cores * 30 * optimal_factor),             # 6 * 30 * 6.0 = 1080
                'aggressive': int(cpu_cores * 50 * aggressive_factor),       # 6 * 50 * 12.0 = 3600!
                'max_memory_based': int(memory_gb * 50 * optimal_factor)     # 16 * 50 * 6.0 = 4800
            },
            'queues': {
                'critical': {
                    'conservative': int(cpu_cores * 5 * conservative_factor),    # 6 * 5 * 3.0 = 90
                    'optimal': int(cpu_cores * 10 * optimal_factor),              # 6 * 10 * 6.0 = 360
                    'aggressive': int(cpu_cores * 20 * aggressive_factor)        # 6 * 20 * 12.0 = 1440!
                },
                'high': {
                    'conservative': int(cpu_cores * 6 * conservative_factor),     # 6 * 6 * 3.0 = 108
                    'optimal': int(cpu_cores * 12 * optimal_factor),              # 6 * 12 * 6.0 = 432
                    'aggressive': int(cpu_cores * 25 * aggressive_factor)         # 6 * 25 * 12.0 = 1800!
                },
                'medium': {
                    'conservative': int(cpu_cores * 8 * conservative_factor),     # 6 * 8 * 3.0 = 144
                    'optimal': int(cpu_cores * 15 * optimal_factor),              # 6 * 15 * 6.0 = 540
                    'aggressive': int(cpu_cores * 30 * aggressive_factor)        # 6 * 30 * 12.0 = 2160!
                },
                'low': {
                    'conservative': int(cpu_cores * 5 * conservative_factor),     # 6 * 5 * 3.0 = 90
                    'optimal': int(cpu_cores * 10 * optimal_factor),              # 6 * 10 * 6.0 = 360
                    'aggressive': int(cpu_cores * 20 * aggressive_factor)        # 6 * 20 * 12.0 = 1440!
                },
                'heavy': {
                    'conservative': int(cpu_cores * 3 * conservative_factor),     # 6 * 3 * 3.0 = 54
                    'optimal': int(cpu_cores * 6 * optimal_factor),              # 6 * 6 * 6.0 = 216
                    'aggressive': int(cpu_cores * 12 * aggressive_factor)        # 6 * 12 * 12.0 = 864!
                }
            },
            'monitoring': {
                'enabled': True,
                'load_limits': {
                    'level_1': {'threshold': 70.0, 'total_limit': None},
                    'level_2': {'threshold': 85.0, 'total_limit': None},
                    'level_3': {'threshold': 95.0, 'total_limit': None}
                }
            }
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ª–∏–º–∏—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        optimal_global = recommendations['global_limit']['optimal']
        recommendations['monitoring']['load_limits']['level_1']['total_limit'] = int(optimal_global * 0.7)
        recommendations['monitoring']['load_limits']['level_2']['total_limit'] = int(optimal_global * 0.5)
        recommendations['monitoring']['load_limits']['level_3']['total_limit'] = int(optimal_global * 0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        recommendations['load_analysis'] = {
            'avg_cpu_delta': avg_cpu_delta,
            'avg_memory_delta': avg_memory_delta,
            'conservative_factor': conservative_factor,
            'optimal_factor': optimal_factor,
            'aggressive_factor': aggressive_factor,
            'recommendation_note': f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π {conservative_factor:.1f}, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π {optimal_factor:.1f}, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π {aggressive_factor:.1f} (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç CPU: {avg_cpu_delta:+.1f}%)"
        }
        
        self.results['recommendations'] = recommendations
        return recommendations
    
    def display_recommendations(self, recommendations: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        self.print_header("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        global_limit = recommendations['global_limit']
        queues = recommendations['queues']
        load_analysis = recommendations.get('load_analysis', {})
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–≥—Ä—É–∑–∫–∏
        if load_analysis:
            print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò:")
            print(f"   {load_analysis.get('recommendation_note', '')}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç RAM: {load_analysis.get('avg_memory_delta', 0):+.1f}%")
        
        print(f"\nüåê –ì–õ–û–ë–ê–õ–¨–ù–´–ô –õ–ò–ú–ò–¢ –°–ò–°–¢–ï–ú–´:")
        print(f"   –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π: {global_limit['conservative']}")
        print(f"   –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: {global_limit['optimal']}")
        print(f"   –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π: {global_limit['aggressive']}")
        print(f"   –ü–æ –ø–∞–º—è—Ç–∏: {global_limit['max_memory_based']}")
        
        print(f"\nüìã –õ–ò–ú–ò–¢–´ –û–ß–ï–†–ï–î–ï–ô:")
        for queue_name, limits in queues.items():
            print(f"\n   {queue_name.upper()}:")
            print(f"     –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π: {limits['conservative']}")
            print(f"     –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π: {limits['optimal']}")
            print(f"     –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π: {limits['aggressive']}")
        
        print(f"\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ù–ê–ì–†–£–ó–ö–ò:")
        monitoring = recommendations['monitoring']
        print(f"   –í–∫–ª—é—á–µ–Ω: {'–î–∞' if monitoring['enabled'] else '–ù–µ—Ç'}")
        for level, config in monitoring['load_limits'].items():
            print(f"   {level}: –ø–æ—Ä–æ–≥ {config['threshold']}%, –ª–∏–º–∏—Ç {config['total_limit']}")
    
    
    def display_settings_summary(self, recommendations: Dict[str, Any], profile: str = 'optimal'):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        global_limit = recommendations['global_limit'][profile]
        queues = recommendations['queues']
        monitoring = recommendations['monitoring']
        
        self.print_header(f"–°–í–û–î–ö–ê –ù–ê–°–¢–†–û–ï–ö ({profile.upper()})")
        
        print(f"\nüåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        print(f"   –û–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–¥–∞—á: {global_limit}")
        print(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {'–î–∞' if monitoring['enabled'] else '–ù–µ—Ç'}")
        
        print(f"\nüìä –õ–ò–ú–ò–¢–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:")
        for level, config in monitoring['load_limits'].items():
            print(f"   {level}: –ø–æ—Ä–æ–≥ {config['threshold']}%, –ª–∏–º–∏—Ç {config['total_limit']}")
        
        print(f"\nüìã –õ–ò–ú–ò–¢–´ –û–ß–ï–†–ï–î–ï–ô:")
        for queue_name, limits in queues.items():
            print(f"   {queue_name}: {limits[profile]}")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∞—à—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        print(f"   ‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        print(f"   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è")
        print(f"   ‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ª–∏–º–∏—Ç—ã")
    
    async def test_real_task_manager(self, recommendations: Dict[str, Any], profile: str = 'optimal'):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π TaskManager —Å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        self.print_header(f"–¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û TASKMANAGER ({profile.upper()})")
        
        global_limit = recommendations['global_limit'][profile]
        queues = recommendations['queues']
        
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {global_limit}")
        for queue_name, limits in queues.items():
            print(f"   {queue_name}: {limits[profile]}")
        
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ TaskManager")
        print(f"   ‚Ä¢ –ü–æ–¥–º–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print(f"   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –≤–æ –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print(f"   ‚Ä¢ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        print(f"\nüöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        print(f"   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º TaskManager")
        print(f"   ‚Ä¢ –ü–æ–¥–º–µ–Ω–∞ config.yaml")
        print(f"   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
        
        # –†–µ–∞–ª–∏–∑—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º TaskManager
        await self._test_real_task_manager_integration(global_limit, queues, profile)
    
    async def _test_real_task_manager_integration(self, global_limit: int, queues: Dict[str, Any], profile: str):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º TaskManager –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–∫ –≤ database_manager.py
            print(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            import os
            import sys
            project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
            sys.path.insert(0, project_root)
            os.chdir(project_root)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            try:
                from dotenv import load_dotenv
                load_dotenv()
            except ImportError:
                print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º
            from app.di_container import DIContainer
            from plugins.utilities.foundation.logger.logger import Logger
            from plugins.utilities.foundation.plugins_manager.plugins_manager import PluginsManager
            from plugins.utilities.foundation.settings_manager.settings_manager import SettingsManager
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            logger = Logger()
            plugins_manager = PluginsManager(logger=logger)
            settings_manager = SettingsManager(logger=logger, plugins_manager=plugins_manager)
            di_container = DIContainer(logger=logger, plugins_manager=plugins_manager, settings_manager=settings_manager)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
            di_container.initialize_all_plugins()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ TaskManager –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
            print(f"üîç –ü–æ–∏—Å–∫ TaskManager –≤ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...")
            task_manager = di_container.get_utility_on_demand("task_manager")
            if not task_manager:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å task_manager –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                return
            
            print(f"‚úÖ TaskManager –ø–æ–ª—É—á–µ–Ω –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
            print(f"   –¢–µ–∫—É—â–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {task_manager.current_total_limit}")
            print(f"   –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω: {task_manager.monitoring_enabled}")
            
            # –ü–æ–¥–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–º TaskManager
            await self._override_task_manager_settings(task_manager, global_limit, queues, profile)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            await self._run_full_load_test(task_manager, queues, profile)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = task_manager.get_stats()
            self._analyze_task_manager_results(stats, profile)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            di_container.shutdown()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
    
    async def _override_task_manager_settings(self, task_manager, global_limit: int, queues: Dict[str, Any], profile: str):
        """–ü–æ–¥–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–±–æ—Ç–∞—é—â–µ–º TaskManager"""
        print(f"\nüîß –ü–æ–¥–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ TaskManager...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        original_settings = {
            'default_total_limit': task_manager.default_total_limit,
            'current_total_limit': task_manager.current_total_limit,
            'monitoring_enabled': task_manager.monitoring_enabled
        }
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        task_manager.default_total_limit = global_limit
        task_manager.current_total_limit = global_limit
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        task_manager.monitoring_enabled = False
        
        print(f"   ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {global_limit}")
        print(f"   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ü–æ–¥–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π —á–µ—Ä–µ–∑ queue_manager
        if hasattr(task_manager, 'queue_manager'):
            queue_manager = task_manager.queue_manager
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –æ—á–µ—Ä–µ–¥–µ–π
            for queue_name, limits in queues.items():
                if hasattr(queue_manager, 'queue_configs') and queue_name in queue_manager.queue_configs:
                    config = queue_manager.queue_configs[queue_name]
                    new_limit = limits[profile]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    config.max_concurrent = new_limit
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
                    if hasattr(queue_manager, 'semaphores') and queue_name in queue_manager.semaphores:
                        old_semaphore = queue_manager.semaphores[queue_name]
                        new_semaphore = asyncio.Semaphore(new_limit)
                        queue_manager.semaphores[queue_name] = new_semaphore
                        
                        print(f"   ‚úÖ {queue_name}: {new_limit} (–±—ã–ª–æ: {old_semaphore._value})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        task_manager._original_settings = original_settings
        
        print(f"   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    
    async def _run_full_load_test(self, task_manager, queues: Dict[str, Any], profile: str):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π"""
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏...")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –¥–ª—è –∫–∞–∂–¥–æ–π –æ—á–µ—Ä–µ–¥–∏ - –°–í–ï–†–• –ª–∏–º–∏—Ç–æ–≤!
        queue_tasks = {}
        
        for queue_name, limits in queues.items():
            queue_limit = limits[profile]
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ 5-10 —Ä–∞–∑ –±–æ–ª—å—à–µ –∑–∞–¥–∞—á —á–µ–º –ª–∏–º–∏—Ç –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏!
            if profile == 'conservative':
                multiplier = 5  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π - –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ
            elif profile == 'optimal':
                multiplier = 8  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π - –≤ 8 —Ä–∞–∑ –±–æ–ª—å—à–µ
            else:  # aggressive
                multiplier = 10  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π - –≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ!
            
            queue_tasks[queue_name] = queue_limit * multiplier
        
        print(f"üìä –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏:")
        for queue_name, task_count in queue_tasks.items():
            queue_limit = queues[queue_name][profile]
            print(f"   {queue_name}: {task_count} –∑–∞–¥–∞—á (–ª–∏–º–∏—Ç: {queue_limit})")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
        start_time = time.time()
        start_cpu = psutil.cpu_percent()
        start_memory = psutil.virtual_memory().percent
        
        submitted_tasks = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –≤–æ –≤—Å–µ –æ—á–µ—Ä–µ–¥–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        for queue_name, task_count in queue_tasks.items():
            for i in range(task_count):
                task_id = f"{queue_name}_{i}"
                coro = lambda: asyncio.create_task(self._create_task_simulator(queue_name, i))
                
                success = await task_manager.submit_task(
                    task_id=task_id,
                    coro=coro,
                    queue_name=queue_name
                )
                
                if success:
                    submitted_tasks += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–¥–∞—á
                await asyncio.sleep(0.001)
        
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {submitted_tasks} –∑–∞–¥–∞—á")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        end_time = time.time()
        end_cpu = psutil.cpu_percent()
        end_memory = psutil.virtual_memory().percent
        
        duration = end_time - start_time
        cpu_delta = end_cpu - start_cpu
        memory_delta = end_memory - start_memory
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f}—Å")
        print(f"   –ü—Ä–∏—Ä–æ—Å—Ç CPU: {cpu_delta:+.1f}%")
        print(f"   –ü—Ä–∏—Ä–æ—Å—Ç RAM: {memory_delta:+.1f}%")
        print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {submitted_tasks}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.test_results = {
            'profile': profile,
            'global_limit': task_manager.current_total_limit,
            'queue_limits': {k: queues[k][profile] for k in queues.keys()},
            'submitted_tasks': submitted_tasks,
            'duration': duration,
            'cpu_delta': cpu_delta,
            'memory_delta': memory_delta,
            'tasks_per_second': submitted_tasks / duration if duration > 0 else 0
        }
    
    async def _create_task_simulator(self, queue_name: str, task_id: int):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏"""
        import random
        
        if queue_name == 'critical':
            # –ë—ã—Å—Ç—Ä—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            await asyncio.sleep(random.uniform(0.01, 0.05))
            data = [random.randint(1, 100) for _ in range(50)]
            result = sum(data)
        elif queue_name == 'high':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            await asyncio.sleep(random.uniform(0.05, 0.1))
            user_data = [random.randint(1, 1000) for _ in range(200)]
            processed = [x * 2 for x in user_data if x % 2 == 0]
        elif queue_name == 'medium':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            await asyncio.sleep(random.uniform(0.1, 0.2))
            data = [random.random() for _ in range(1000)]
            data.sort()
            mean = sum(data) / len(data)
        elif queue_name == 'low':
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await asyncio.sleep(random.uniform(0.2, 0.4))
            logs = [f"Log entry {i}: {random.randint(1, 1000)}" for i in range(500)]
            stats = {}
            for log in logs:
                key = log.split(':')[0]
                stats[key] = stats.get(key, 0) + 1
        else:  # heavy
            # –¢—è–∂–µ–ª—ã–µ –∑–∞–¥–∞—á–∏
            await asyncio.sleep(random.uniform(0.02, 0.1))
            matrix_a = [[random.random() for _ in range(50)] for _ in range(50)]
            matrix_b = [[random.random() for _ in range(50)] for _ in range(50)]
            result_matrix = [[0 for _ in range(50)] for _ in range(50)]
            for i in range(50):
                for j in range(50):
                    for k in range(50):
                        result_matrix[i][j] += matrix_a[i][k] * matrix_b[k][j]
    
    def _analyze_task_manager_results(self, stats: Dict[str, Any], profile: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã TaskManager"""
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ TASKMANAGER:")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active_tasks = stats.get('active_tasks', {})
        total_active = sum(active_tasks.values())
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {total_active}")
        for queue_name, count in active_tasks.items():
            print(f"     {queue_name}: {count}")
        
        # –†–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π
        queue_sizes = stats.get('queue_sizes', {})
        total_queued = sum(queue_sizes.values())
        print(f"   –ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—è—Ö: {total_queued}")
        for queue_name, size in queue_sizes.items():
            print(f"     {queue_name}: {size}")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        system_limit = stats.get('system_limit', 0)
        print(f"   –°–∏—Å—Ç–µ–º–Ω—ã–π –ª–∏–º–∏—Ç: {system_limit}")
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if hasattr(self, 'test_results'):
            results = self.test_results
            efficiency = results['tasks_per_second']
            cpu_load = results['cpu_delta']
            
            print(f"\nüéØ –û–¶–ï–ù–ö–ê –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {efficiency:.1f} –∑–∞–¥–∞—á/—Å–µ–∫")
            print(f"   CPU –Ω–∞–≥—Ä—É–∑–∫–∞: {cpu_load:+.1f}%")
            
            if cpu_load < 5:
                print("   ‚úÖ –ù–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã")
            elif cpu_load < 15:
                print("   ‚ö†Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞ —É–º–µ—Ä–µ–Ω–Ω–∞—è - –ª–∏–º–∏—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç")
            else:
                print("   ‚ùå –ù–∞–≥—Ä—É–∑–∫–∞ –≤—ã—Å–æ–∫–∞—è - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç—ã")

async def interactive_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    analyzer = ServerAnalyzer()
    
    while True:
        print(f"\n{analyzer.colors['header']}üîß –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê{analyzer.colors['end']}")
        print("1. üìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        print("2. üñ•Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
        print("3. üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("4. üéØ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ TaskManager")
        print("5. ‚ùå –í—ã—Ö–æ–¥")
        
        choice = input(f"\n{analyzer.colors['info']}–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): {analyzer.colors['end']}").strip()
        
        if choice == '1':
            # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analyzer.print_header("–ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´")
            system_info = analyzer.get_system_info()
            analyzer.display_system_info(system_info)
            
            # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            analyzer.print_header("–ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
            await analyzer.run_basic_performance_tests()
            
            recommendations = analyzer.calculate_recommendations()
            analyzer.display_recommendations(recommendations)
            
        elif choice == '2':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            system_info = analyzer.get_system_info()
            analyzer.display_system_info(system_info)
            
        elif choice == '3':
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if not analyzer.results.get('recommendations'):
                analyzer.print_warning("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã")
                continue
            analyzer.display_recommendations(analyzer.results['recommendations'])
            
        elif choice == '4':
            # –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ TaskManager
            if not analyzer.results.get('recommendations'):
                analyzer.print_warning("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                continue
            
            print(f"\n{analyzer.colors['info']}–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:{analyzer.colors['end']}")
            print("1. –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π)")
            print("2. –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π)")
            print("3. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)")
            
            profile_choice = input("–ü—Ä–æ—Ñ–∏–ª—å (1-3): ").strip()
            profile_map = {'1': 'conservative', '2': 'optimal', '3': 'aggressive'}
            profile = profile_map.get(profile_choice, 'optimal')
            
            await analyzer.test_real_task_manager(analyzer.results['recommendations'], profile)
            
        elif choice == '5':
            # –í—ã—Ö–æ–¥
            analyzer.print_success("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            analyzer.print_error("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await interactive_menu()
    except KeyboardInterrupt:
        print(f"\n{ServerAnalyzer().colors['warning']}–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{ServerAnalyzer().colors['end']}")
    except Exception as e:
        print(f"\n{ServerAnalyzer().colors['error']}–û—à–∏–±–∫–∞: {e}{ServerAnalyzer().colors['end']}")

if __name__ == "__main__":
    asyncio.run(main())
