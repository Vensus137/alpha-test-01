#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MTProto —Å–µ—Å—Å–∏–∏
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫—ç—à entities –∏ –∏—Å–∫–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
"""

import sqlite3
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

try:
    from plugins.utilities.foundation.settings_manager.settings_manager import SettingsManager
    from plugins.utilities.foundation.logger.logger import Logger
    from plugins.utilities.foundation.plugins_manager.plugins_manager import PluginsManager
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class SessionAnalyzer:
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MTProto —Å–µ—Å—Å–∏–∏"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
        self.logger = Logger()
        self.plugins_manager = PluginsManager(logger=self.logger)
        self.settings_manager = SettingsManager(logger=self.logger, plugins_manager=self.plugins_manager)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
        self.project_root = Path(self.settings_manager.get_project_root())
        self.session_path = self.project_root / 'data' / 'sessions' / 'mtproto_session.session'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not self.session_path.exists():
            print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.session_path}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MTProto —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            sys.exit(1)
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ç–∏–ª–∏—Ç—ã"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MTProto —Å–µ—Å—Å–∏–∏")
        print("=" * 50)
        print(f"üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {self.session_path}")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {self.session_path.stat().st_size / 1024 / 1024:.2f} –ú–ë")
        print()
    
    def get_entities_count(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ entities –≤ –∫—ç—à–µ"""
        try:
            conn = sqlite3.connect(self.session_path)
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ entities
            cursor.execute("SELECT COUNT(*) FROM entities")
            total_count = cursor.fetchone()[0]
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (ID > 0)
            cursor.execute("SELECT COUNT(*) FROM entities WHERE id > 0")
            users_count = cursor.fetchone()[0]
            
            # –ì—Ä—É–ø–ø—ã (ID < 0 –∏ ID > -1000000000000)
            cursor.execute("SELECT COUNT(*) FROM entities WHERE id < 0 AND id > -1000000000000")
            groups_count = cursor.fetchone()[0]
            
            # –ö–∞–Ω–∞–ª—ã (ID < -1000000000000)
            cursor.execute("SELECT COUNT(*) FROM entities WHERE id < -1000000000000")
            channels_count = cursor.fetchone()[0]
            
            conn.close()
            
            return {
                'total': total_count,
                'users': users_count,
                'groups': groups_count,
                'channels': channels_count
            }
            
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
            return None
    
    def show_cache_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ"""
        print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–≠–®–ï:")
        print("-" * 30)
        
        counts = self.get_entities_count()
        if counts:
            print(f"üë• –í—Å–µ–≥–æ entities: {counts['total']}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {counts['users']}")
            print(f"üí¨ –ì—Ä—É–ø–ø—ã: {counts['groups']}")
            print(f"üì¢ –ö–∞–Ω–∞–ª—ã: {counts['channels']}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ")
        
        print()
    
    def show_entities_examples(self, limit=5):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã entities –∏–∑ –∫—ç—à–∞"""
        print(f"üîç –ü–†–ò–ú–ï–†–´ ENTITIES (–ø–µ—Ä–≤—ã–µ {limit} –∑–∞–ø–∏—Å–µ–π):")
        print("-" * 40)
        
        try:
            conn = sqlite3.connect(self.session_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT id, username, name, date FROM entities ORDER BY date DESC LIMIT ?", (limit,))
            entities = cursor.fetchall()
            
            if entities:
                for i, entity in enumerate(entities, 1):
                    entity_id, username, name, date = entity
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
                    if entity_id > 0:
                        entity_type = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    elif entity_id < -1000000000000:
                        entity_type = "üì¢ –ö–∞–Ω–∞–ª"
                    else:
                        entity_type = "üí¨ –ì—Ä—É–ø–ø–∞"
                    
                    print(f"{i}. {entity_type}")
                    print(f"   ID: {entity_id}")
                    print(f"   Username: {username or '–ù–µ—Ç'}")
                    print(f"   Name: {name or '–ù–µ—Ç'}")
                    print(f"   Date: {date}")
                    print()
            else:
                print("‚ùå Entities –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
            
            conn.close()
            
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ entities: {e}")
    
    def search_entity_by_id(self, entity_id):
        """–ò—â–µ—Ç entity –ø–æ ID"""
        print(f"üîç –ü–û–ò–°–ö ENTITY –ü–û ID: {entity_id}")
        print("-" * 35)
        
        try:
            conn = sqlite3.connect(self.session_path)
            cursor = conn.cursor()
            
            cursor.execute("SELECT id, username, name, date FROM entities WHERE id = ?", (entity_id,))
            entity = cursor.fetchone()
            
            if entity:
                entity_id, username, name, date = entity
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø
                if entity_id > 0:
                    entity_type = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                elif entity_id < -1000000000000:
                    entity_type = "üì¢ –ö–∞–Ω–∞–ª"
                else:
                    entity_type = "üí¨ –ì—Ä—É–ø–ø–∞"
                
                print(f"‚úÖ Entity –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ!")
                print(f"–¢–∏–ø: {entity_type}")
                print(f"ID: {entity_id}")
                print(f"Username: {username or '–ù–µ—Ç'}")
                print(f"Name: {name or '–ù–µ—Ç'}")
                print(f"Date: {date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
                if entity_id > 0:
                    print(f"üîë –î–æ—Å—Ç—É–ø: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
                elif entity_id < -1000000000000:
                    print(f"üîë –î–æ—Å—Ç—É–ø: –ö–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
                else:
                    print(f"üîë –î–æ—Å—Ç—É–ø: –ì—Ä—É–ø–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è")
                
            else:
                print(f"‚ùå Entity —Å ID {entity_id} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ")
                print("–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —á–∞—Ç—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            conn.close()
            
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ entity: {e}")
        
        print()
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ")
        print("2. üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã entities")
        print("3. üéØ –ü–æ–∏—Å–∫ entity –ø–æ ID")
        print("4. üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print()
    
    def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.print_header()
        
        while True:
            self.show_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-4): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == "1":
                    self.show_cache_info()
                elif choice == "2":
                    self.show_entities_examples()
                elif choice == "3":
                    try:
                        entity_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID entity –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip())
                        self.search_entity_by_id(entity_id)
                    except ValueError:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                elif choice == "4":
                    print("üîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                    self.print_header()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                print("\n" + "="*50 + "\n")
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MTProto —Å–µ—Å—Å–∏–∏')
    parser.add_argument('--id', type=int, help='–ü–æ–∏—Å–∫ entity –ø–æ ID (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)')
    parser.add_argument('--info', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—ç—à–µ')
    parser.add_argument('--examples', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã entities')
    
    args = parser.parse_args()
    
    analyzer = SessionAnalyzer()
    
    if args.id:
        # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∏—Å–∫ –ø–æ ID
        analyzer.print_header()
        analyzer.search_entity_by_id(args.id)
    elif args.info:
        # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        analyzer.print_header()
        analyzer.show_cache_info()
    elif args.examples:
        # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä—ã
        analyzer.print_header()
        analyzer.show_entities_examples()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        analyzer.run_interactive()


if __name__ == "__main__":
    main()
