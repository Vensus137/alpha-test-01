#!/usr/bin/env python3
"""
MTProto Manager - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MTProto

–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–∞–º–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É, —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —á–∞—Ç–æ–≤.
"""

import asyncio
import json
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
os.chdir(project_root)

from app.di_container import DIContainer
from plugins.utilities.foundation.logger.logger import Logger
from plugins.utilities.foundation.plugins_manager.plugins_manager import PluginsManager
from plugins.utilities.foundation.settings_manager.settings_manager import SettingsManager


class MTProtoManager:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MTProto API"""
    
    def __init__(self):
        self.di_container = None
        self.tg_mtproto = None
        self.logger = None
        self.settings_manager = None
        self.temp_dir = project_root / "data" / "temp"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        self.temp_dir.mkdir(parents=True, exist_ok=True)
    
    def print_header(self):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ç–∏–ª–∏—Ç—ã"""
        print("üîê MTProto Manager - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram")
        print("=" * 70)
        print(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.temp_dir}")
        print()
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —É—Ç–∏–ª–∏—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º logger
            logger = Logger()
            
            # –°–æ–∑–¥–∞–µ–º plugins_manager
            plugins_manager = PluginsManager(logger=logger)
            
            # –°–æ–∑–¥–∞–µ–º settings_manager
            settings_manager = SettingsManager(logger=logger, plugins_manager=plugins_manager)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.di_container = DIContainer(logger=logger, plugins_manager=plugins_manager, settings_manager=settings_manager)
            self.di_container.initialize_all_plugins()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—Ç–∏–ª–∏—Ç—ã
            self.tg_mtproto = self.di_container.get_utility("tg_mtproto")
            self.logger = self.di_container.get_utility("logger")
            self.settings_manager = self.di_container.get_utility("settings_manager")
            
            if not self.tg_mtproto:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å tg_mtproto –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                return False
            
            if not self.logger:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å logger –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                return False
            
            if not self.settings_manager:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å settings_manager –∏–∑ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def show_main_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print("1. üîß –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π")
        print("2. üìã –î–µ–π—Å—Ç–≤–∏—è —Å —á–∞—Ç–∞–º–∏")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print()
    
    def show_session_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π"""
        print("\nüîß –†–ê–ë–û–¢–ê –° –°–ï–°–°–ò–ï–ô:")
        print("1. üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏")
        print("2. üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ (logout)")
        print("3. üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏")
        print("4. üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
        print("5. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print()
    
    def show_chats_menu(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–∞–º–∏"""
        print("\nüìã –î–ï–ô–°–¢–í–ò–Ø –° –ß–ê–¢–ê–ú–ò:")
        print("1. üîç –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        print("2. üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        print("3. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ª–∏–º–∏—Ç —á–∞—Ç–æ–≤)")
        print("4. üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("5. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print()
    
    async def run_main_menu(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            self.show_main_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª (0-2): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return False
                elif choice == "1":
                    result = await self.run_session_menu()
                    if result == "exit":
                        return False  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    # –ï—Å–ª–∏ result == "back", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                elif choice == "2":
                    result = await self.run_chats_menu()
                    if result == "exit":
                        return False  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    # –ï—Å–ª–∏ result == "back", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_session_menu(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π"""
        while True:
            self.show_session_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return "exit"  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                elif choice == "1":
                    await self.handle_session_diagnosis()
                elif choice == "2":
                    await self.handle_session_logout()
                elif choice == "3":
                    await self.handle_session_info()
                elif choice == "4":
                    await self.handle_session_create()
                elif choice == "5":
                    return "back"  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                print("\n" + "="*50 + "\n")
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return "exit"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    async def run_chats_menu(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–∞–º–∏"""
        limit = 50  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        while True:
            self.show_chats_menu()
            
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    return "exit"  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                elif choice == "1":
                    await self.handle_simple_chats(limit)
                elif choice == "2":
                    await self.handle_detailed_chats(limit)
                elif choice == "3":
                    limit = self.handle_settings(limit)
                elif choice == "4":
                    self.show_saved_files()
                elif choice == "5":
                    return "back"  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                print("\n" + "="*50 + "\n")
                
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return "exit"
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –°–ï–°–°–ò–ï–ô ===
    
    async def handle_session_diagnosis(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_ok = self.check_configuration()
        if not config_ok:
            print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞: –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_exists = self.session_exists()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        session_valid = False
        if file_exists:
            session_valid = await self.check_session()
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:")
        print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'OK' if config_ok else 'FAIL'}")
        print(f"   üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏: {'OK' if file_exists else 'MISSING'}")
        print(f"   üîê –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: {'OK' if session_valid else 'INVALID'}")
        
        if not file_exists or not session_valid:
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
    
    async def handle_session_logout(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏"""
        print("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏...")
        
        if not self.check_configuration():
            return
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
            if not await self.tg_mtproto.connect():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏")
                return
            
            client = self.tg_mtproto.get_client()
            if not client:
                self.logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            self.logger.info(f"üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (@{me.username})")
            
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–µ—Å—Å–∏–∏
            self.logger.info("üîÑ –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏...")
            await client.log_out()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await self.tg_mtproto.disconnect()
            
            self.logger.info("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            self.logger.info("üîÑ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–µ—Å—Å–∏–∏: {e}")
    
    async def handle_session_info(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏"""
        print("üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏...")
        
        session_path = self.get_session_path()
        session_file = Path(session_path)
        
        if session_file.exists():
            size = session_file.stat().st_size
            print(f"üìÅ –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏: {session_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
            print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.fromtimestamp(session_file.stat().st_ctime).strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"üìÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {datetime.fromtimestamp(session_file.stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')}")
        else:
            print("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def handle_session_create(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
        
        if not self.check_configuration():
            return
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
            try:
                import asyncio
                connect_task = asyncio.create_task(self.tg_mtproto.connect())
                connected = await asyncio.wait_for(connect_task, timeout=10.0)
                
                if connected:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    client = self.tg_mtproto.get_client()
                    if client:
                        me = await client.get_me()
                        self.logger.info("‚úÖ –°–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                        self.logger.info(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
                        await self.tg_mtproto.disconnect()
                        return
            except asyncio.TimeoutError:
                self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏: {e}")
            
            # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            self.logger.info("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +79001234567)")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            client = await self.tg_mtproto.create_client()
            if not client:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç")
                return
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            await client.connect()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await client.get_me()
            self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            self.logger.info(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
            self.logger.info(f"üìÅ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {self.get_session_path()}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
            await client.disconnect()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    # === –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ß–ê–¢–ê–ú–ò ===
    
    async def handle_simple_chats(self, limit: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
        
        if not await self.connect_to_telegram():
            return
        
        try:
            chats_list = await self.get_simple_chats_list(limit)
            
            if chats_list:
                self.show_chats_preview(chats_list)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"chats_simple_{timestamp}.json"
                file_path = await self.save_to_file(chats_list, filename, "simple")
                
                if file_path:
                    print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        
        finally:
            await self.disconnect_from_telegram()
    
    async def handle_detailed_chats(self, limit: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
        
        if not await self.connect_to_telegram():
            return
        
        try:
            chats_list = await self.get_detailed_chats_list(limit)
            
            if chats_list:
                self.show_chats_preview(chats_list)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"chats_detailed_{timestamp}.json"
                file_path = await self.save_to_file(chats_list, filename, "detailed")
                
                if file_path:
                    print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        
        finally:
            await self.disconnect_from_telegram()
    
    def handle_settings(self, current_limit: int) -> int:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤: {current_limit}")
        
        try:
            new_limit = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤ (1-200): ").strip())
            if 1 <= new_limit <= 200:
                print(f"‚úÖ –õ–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit}")
                return new_limit
            else:
                print("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 200")
                return current_limit
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
            return current_limit
    
    def show_saved_files(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        print("üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("-" * 30)
        
        if not self.temp_dir.exists():
            print("‚ùå –ü–∞–ø–∫–∞ temp –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        files = list(self.temp_dir.glob("chats_*.json"))
        
        if not files:
            print("üì≠ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for i, file_path in enumerate(files, 1):
            file_size = file_path.stat().st_size / 1024  # KB
            file_time = datetime.fromtimestamp(file_path.stat().st_mtime)
            print(f"{i}. {file_path.name}")
            print(f"   –†–∞–∑–º–µ—Ä: {file_size:.1f} KB")
            print(f"   –î–∞—Ç–∞: {file_time.strftime('%Y-%m-%d %H:%M:%S')}")
            print()
    
    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def get_session_path(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏"""
        return self.tg_mtproto.core.session_path
    
    def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings = self.settings_manager.get_plugin_settings('tg_mtproto')
            if not settings:
                self.logger.error("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ tg_mtproto –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            api_id_str = settings.get('api_id', '')
            api_hash = settings.get('api_hash', '')
            
            if not api_id_str:
                self.logger.error("‚ùå API ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è MTPROTO_API_ID")
                return False
            
            if not api_hash:
                self.logger.error("‚ùå API Hash –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è MTPROTO_API_HASH")
                return False
            
            try:
                int(api_id_str)
            except ValueError:
                self.logger.error(f"‚ùå API ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: '{api_id_str}'")
                return False
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def session_exists(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏"""
        session_file = Path(self.get_session_path())
        exists = session_file.exists()
        if exists:
            size = session_file.stat().st_size
            self.logger.info(f"üìÅ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {self.get_session_path()} ({size} –±–∞–π—Ç)")
        else:
            self.logger.info(f"üìÅ –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.get_session_path()}")
        return exists
    
    async def check_session(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        if not self.session_exists():
            self.logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        try:
            import asyncio
            connect_task = asyncio.create_task(self.tg_mtproto.connect())
            connected = await asyncio.wait_for(connect_task, timeout=10.0)
            
            if connected:
                client = self.tg_mtproto.get_client()
                if client:
                    me = await client.get_me()
                    self.logger.info("‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
                    self.logger.info(f"üë§ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (@{me.username})")
                    await self.tg_mtproto.disconnect()
                    return True
            
            self.logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return False
                
        except asyncio.TimeoutError:
            self.logger.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    async def connect_to_telegram(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Telegram"""
        try:
            print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            
            if not await self.tg_mtproto.connect():
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MTProto API")
                return False
            
            client = self.tg_mtproto.get_client()
            if not client:
                self.logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def disconnect_from_telegram(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç Telegram"""
        try:
            await self.tg_mtproto.disconnect()
            print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    async def get_simple_chats_list(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        try:
            print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ª–∏–º–∏—Ç: {limit})...")
            
            client = self.tg_mtproto.get_client()
            if not client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            dialogs = await self.tg_mtproto.safe_api_call(
                client.get_dialogs, limit=limit
            )
            
            if not dialogs:
                self.logger.warning("‚ö†Ô∏è –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            chats_list = []
            
            for dialog in dialogs:
                entity = dialog.entity
                message = dialog.message
                
                # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                chat_info = {
                    'id': entity.id,
                    'type': type(entity).__name__,
                    'title': getattr(entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'username': getattr(entity, 'username', None),
                    'first_name': getattr(entity, 'first_name', None),
                    'last_name': getattr(entity, 'last_name', None),
                    'unread_count': dialog.unread_count,
                    'pinned': dialog.pinned,
                    'last_message_date': message.date.isoformat() if message else None,
                    'last_message_text': getattr(message, 'message', '') if message else None
                }
                chats_list.append(chat_info)
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(chats_list)} —á–∞—Ç–æ–≤ (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç)")
            return chats_list
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
    
    async def get_detailed_chats_list(self, limit: int = 50) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"""
        try:
            print(f"üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–ª–∏–º–∏—Ç: {limit})...")
            
            client = self.tg_mtproto.get_client()
            if not client:
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
            dialogs = await self.tg_mtproto.safe_api_call(
                client.get_dialogs, limit=limit
            )
            
            if not dialogs:
                self.logger.warning("‚ö†Ô∏è –î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            chats_list = []
            
            for dialog in dialogs:
                chat_info = self.parse_dialog_to_dict(dialog)
                chats_list.append(chat_info)
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(chats_list)} —á–∞—Ç–æ–≤ (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
            return chats_list
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
    
    def parse_dialog_to_dict(self, dialog) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∏–∞–ª–æ–≥ –≤ —Å–ª–æ–≤–∞—Ä—å (–¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
        try:
            entity = dialog.entity
            message = dialog.message
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ
            chat_info = {
                'id': entity.id,
                'type': self.get_entity_type(entity),
                'title': self.get_entity_title(entity),
                'username': getattr(entity, 'username', None),
                'first_name': getattr(entity, 'first_name', None),
                'last_name': getattr(entity, 'last_name', None),
                'phone': getattr(entity, 'phone', None),
                'verified': getattr(entity, 'verified', False),
                'premium': getattr(entity, 'premium', False),
                'bot': getattr(entity, 'bot', False),
                'scam': getattr(entity, 'scam', False),
                'fake': getattr(entity, 'fake', False),
                'participants_count': getattr(entity, 'participants_count', None),
                'photo': self.get_photo_info(entity),
                'last_message': self.get_last_message_info(message) if message else None,
                'unread_count': dialog.unread_count,
                'pinned': dialog.pinned,
                'archived': dialog.archived,
                'folder_id': dialog.folder_id,
                'date': dialog.date.isoformat() if dialog.date else None
            }
            
            return chat_info
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return {'id': 'unknown', 'type': 'unknown', 'title': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞'}
    
    def get_entity_type(self, entity) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø entity"""
        entity_type = type(entity).__name__
        
        if 'User' in entity_type:
            return 'user'
        elif 'Chat' in entity_type:
            return 'group'
        elif 'Channel' in entity_type:
            if getattr(entity, 'megagroup', False):
                return 'supergroup'
            elif getattr(entity, 'broadcast', False):
                return 'channel'
            else:
                return 'channel'
        else:
            return 'unknown'
    
    def get_entity_title(self, entity) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ entity"""
        if hasattr(entity, 'title'):
            return entity.title
        elif hasattr(entity, 'first_name'):
            first_name = entity.first_name or ''
            last_name = getattr(entity, 'last_name', '') or ''
            return f"{first_name} {last_name}".strip()
        else:
            return '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
    
    def get_photo_info(self, entity) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ"""
        photo = getattr(entity, 'photo', None)
        if not photo:
            return None
        
        photo_type = type(photo).__name__
        if photo_type == 'ChatPhotoEmpty':
            return {'type': 'empty'}
        
        photo_info = {
            'type': photo_type,
            'photo_id': getattr(photo, 'photo_id', None),
            'dc_id': getattr(photo, 'dc_id', None),
            'has_video': getattr(photo, 'has_video', False)
        }
        
        stripped_thumb = getattr(photo, 'stripped_thumb', None)
        if stripped_thumb:
            if isinstance(stripped_thumb, bytes):
                photo_info['stripped_thumb'] = stripped_thumb.hex()
            else:
                photo_info['stripped_thumb'] = str(stripped_thumb)
        
        return photo_info
    
    def get_last_message_info(self, message) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        if not message:
            return None
        
        return {
            'id': message.id,
            'text': getattr(message, 'message', ''),
            'date': message.date.isoformat() if message.date else None,
            'out': getattr(message, 'out', False),
            'mentioned': getattr(message, 'mentioned', False),
            'media_unread': getattr(message, 'media_unread', False),
            'silent': getattr(message, 'silent', False),
            'post': getattr(message, 'post', False),
            'from_scheduled': getattr(message, 'from_scheduled', False),
            'legacy': getattr(message, 'legacy', False),
            'edit_hide': getattr(message, 'edit_hide', False),
            'pinned': getattr(message, 'pinned', False),
            'noforwards': getattr(message, 'noforwards', False),
            'media': self.get_media_info(message)
        }
    
    def get_media_info(self, message) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞"""
        media = getattr(message, 'media', None)
        if not media:
            return None
        
        media_type = type(media).__name__
        media_info = {'type': media_type}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = getattr(media, 'photo', None)
        if photo:
            media_info['photo'] = {
                'id': getattr(photo, 'id', None),
                'access_hash': getattr(photo, 'access_hash', None),
                'file_reference': getattr(photo, 'file_reference', None)
            }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = getattr(media, 'document', None)
        if document:
            media_info['document'] = {
                'id': getattr(document, 'id', None),
                'access_hash': getattr(document, 'access_hash', None),
                'file_reference': getattr(document, 'file_reference', None),
                'mime_type': getattr(document, 'mime_type', None),
                'size': getattr(document, 'size', None)
            }
        
        return media_info
    
    def clean_for_json(self, obj):
        """–û—á–∏—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è JSON"""
        if isinstance(obj, dict):
            return {key: self.clean_for_json(value) for key, value in obj.items()}
        elif isinstance(obj, list):
            return [self.clean_for_json(item) for item in obj]
        elif isinstance(obj, bytes):
            return obj.hex()
        elif hasattr(obj, '__dict__'):
            return str(obj)
        else:
            return obj
    
    async def save_to_file(self, chats_list: List[Dict[str, Any]], filename: str, format_type: str = "simple"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            file_path = self.temp_dir / filename
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            data = {
                'timestamp': datetime.now().isoformat(),
                'format_type': format_type,
                'total_chats': len(chats_list),
                'chats': chats_list
            }
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            clean_data = self.clean_for_json(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(clean_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {file_path}")
            return file_path
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def show_chats_preview(self, chats_list: List[Dict[str, Any]], limit: int = 5):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é —á–∞—Ç–æ–≤"""
        print(f"\nüìã –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤—ã—Ö {limit} —á–∞—Ç–æ–≤:")
        print("-" * 50)
        
        for i, chat in enumerate(chats_list[:limit]):
            title = chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            chat_type = chat.get('type', 'unknown')
            chat_id = chat.get('id', 'unknown')
            username = chat.get('username', '')
            
            username_str = f" (@{username})" if username else ""
            print(f"{i+1}. {title}{username_str}")
            print(f"   –¢–∏–ø: {chat_type} | ID: {chat_id}")
            print()
    
    async def run_interactive(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.print_header()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        if not await self.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await self.run_main_menu()
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if self.di_container:
            self.di_container.shutdown()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='MTProto Manager - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram')
    parser.add_argument('--simple', action='store_true', help='–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)')
    parser.add_argument('--detailed', action='store_true', help='–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ (–Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º)')
    parser.add_argument('--limit', type=int, default=50, help='–õ–∏–º–∏—Ç —á–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)')
    
    args = parser.parse_args()
    
    manager = MTProtoManager()
    
    try:
        if args.simple:
            # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            if await manager.initialize():
                if await manager.connect_to_telegram():
                    try:
                        chats_list = await manager.get_simple_chats_list(args.limit)
                        if chats_list:
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            filename = f"chats_simple_{timestamp}.json"
                            file_path = await manager.save_to_file(chats_list, filename, "simple")
                            if file_path:
                                print(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    finally:
                        await manager.disconnect_from_telegram()
        elif args.detailed:
            # –ù–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            if await manager.initialize():
                if await manager.connect_to_telegram():
                    try:
                        chats_list = await manager.get_detailed_chats_list(args.limit)
                        if chats_list:
                            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                            filename = f"chats_detailed_{timestamp}.json"
                            file_path = await manager.save_to_file(chats_list, filename, "detailed")
                            if file_path:
                                print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                    finally:
                        await manager.disconnect_from_telegram()
        else:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            await manager.run_interactive()
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if manager.di_container:
            manager.di_container.shutdown()


if __name__ == "__main__":
    asyncio.run(main())
