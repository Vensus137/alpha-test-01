import os
import shutil
import subprocess
import tempfile
import zipfile
import datetime

import requests
from dotenv import load_dotenv

load_dotenv()

# === –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
VERSIONS = {
    'base': {
        'name': "Base",
        'description': "–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è",
        'repo_url': "https://github.com/Vensus137/Coreness",
        'branch': "main",
        'update_token_env': None  # Base –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞
    },
    'pro': {
        'name': "Pro", 
        'description': "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        'repo_url': "https://github.com/Vensus137/coreness-pro",
        'branch': "main",
        'update_token_env': "UPDATE_TOKEN_PRO"
    }
}

# –ü–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –¥–ª—è —á–∏—Å—Ç–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—É–¥–∞–ª—è—é—Ç—Å—è –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—Ç—Å—è)
CLEAN_SYNC_ITEMS = [
    "plugins",              # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    "tools",                # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    "app",                  # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    # "old_config.yaml",   # –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–Ω—Ñ–∏–≥
    # "deprecated.py",     # –£–¥–∞–ª–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å–∫—Ä–∏–ø—Ç
]

# –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É)
FACTORY_CONFIGS = [
    "config",
    "resources"
]

# –ü–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è)
EXCLUDE_PATHS = [
    "logs",
    "data",
    ".git",
    ".github",
    ".gitignore",
    ".venv",           # –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Python
    "venv",            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    "__pycache__",     # –ö—ç—à Python
    "*.pyc",           # –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Python —Ñ–∞–π–ª—ã
    ".pytest_cache",   # –ö—ç—à pytest
    ".coverage",       # –§–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–∞–ø–∞
BACKUP_CONFIG = {
    'default_keep': True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±—ç–∫–∞–ø
    'dir_name': ".core_update_backup"
}

def load_config():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    return {
        'versions': VERSIONS,
        'clean_sync_items': CLEAN_SYNC_ITEMS,
        'factory_configs': FACTORY_CONFIGS,
        'exclude_paths': EXCLUDE_PATHS,
        'backup': BACKUP_CONFIG
    }

def get_available_versions(config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    return list(config['versions'].keys())

def validate_version(version, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    return version.lower() in config['versions']

def get_version_info(version, config):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
    return config['versions'].get(version.lower())

def get_github_token(version_info):
    """–ü–æ–ª—É—á–∞–µ—Ç GitHub —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
    # Base –≤–µ—Ä—Å–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    if version_info['update_token_env'] is None:
        print("‚ÑπÔ∏è Base –≤–µ—Ä—Å–∏—è - –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, —Ç–æ–∫–µ–Ω –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return None
    
    # Pro –≤–µ—Ä—Å–∏—è —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    token_env = version_info['update_token_env']
    token = os.getenv(token_env)
    if not token:
        print(f"‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {token_env} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return None
    return token

def get_unique_backup_dir(base_dir):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏ –±—ç–∫–∞–ø–∞"""
    if not os.path.exists(base_dir):
        return base_dir
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    unique_dir = f"{base_dir}_{timestamp}"
    
    # –ï—Å–ª–∏ –∏ —Å –º–µ—Ç–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    counter = 1
    while os.path.exists(unique_dir):
        unique_dir = f"{base_dir}_{timestamp}_{counter}"
        counter += 1
    
    return unique_dir

def request_manual_token():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é"""
    print("\nüîë –í–≤–µ–¥–∏—Ç–µ GitHub —Ç–æ–∫–µ–Ω:")
    
    while True:
        token = input("GitHub —Ç–æ–∫–µ–Ω: ").strip()
        if token:
            return token
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def find_project_root():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ tools/
    is_in_tools = os.path.basename(script_dir) == "tools"
    
    if is_in_tools:
        # –°–∫—Ä–∏–ø—Ç –≤ –ø–∞–ø–∫–µ tools/ - —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–ø–∫–µ –Ω–∞–¥ tools/ (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
        project_dir = os.path.dirname(script_dir)
        print(f"üìç –†–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")
        return project_dir
    else:
        # –°–∫—Ä–∏–ø—Ç –Ω–µ –≤ –ø–∞–ø–∫–µ tools/ - —ç—Ç–æ –ø–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        print(f"üìç –†–µ–∂–∏–º –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏: —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞—é –≤ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–ø—Ç–∞: {script_dir}")
        return script_dir

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def is_excluded(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–∫–ª—é—á–µ–Ω –ª–∏ –ø—É—Ç—å –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    for excl in config['exclude_paths']:
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if path == excl:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –ø—É—Ç–∏ (–¥–ª—è –ø–∞–ø–æ–∫)
        if excl.endswith(os.sep) or not excl.endswith('*'):
            if path.startswith(excl + os.sep):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        if excl.endswith('*'):
            pattern = excl[:-1]  # –£–±–∏—Ä–∞–µ–º *
            if path.startswith(pattern):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, __pycache__ –≤ –ª—é–±–æ–π –ø–∞–ø–∫–µ)
        if excl in path.split(os.sep):
            return True
    
    return False

def is_clean_sync_item(path, config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç"""
    return path in config['clean_sync_items']

def remove_old(path):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    if os.path.exists(path):
        if os.path.isdir(path):
            shutil.rmtree(path)
        else:
            os.remove(path)

def copy_new(src, dst):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É"""
    if os.path.isdir(src):
        shutil.copytree(src, dst)
    else:
        shutil.copy2(src, dst)

def backup_paths(backup_dir, config, include_factory_configs=False):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ (–∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    
    os.makedirs(backup_dir, exist_ok=True)
    
    total_items = 0
    processed_items = 0
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    for item in os.listdir(project_root):
        if os.path.exists(os.path.join(project_root, item)):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if is_excluded(item, config):
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
            if not include_factory_configs and item in config['factory_configs']:
                continue
            total_items += 1
    
    print(f"üìÅ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {total_items}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
    for item in os.listdir(project_root):
        if not os.path.exists(os.path.join(project_root, item)):
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if is_excluded(item, config):
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π: {item}")
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
        if not include_factory_configs and item in config['factory_configs']:
            print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥: {item}")
            continue
            
        try:
            processed_items += 1
            print(f"üóÇ –ö–æ–ø–∏—Ä—É—é {processed_items}/{total_items}: {item}")
            
            src_path = os.path.join(project_root, item)
            backup_path = os.path.join(backup_dir, item)
            if os.path.isdir(src_path):
                shutil.copytree(src_path, backup_path, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, backup_path)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {item}: {e}")
            continue
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {processed_items}/{total_items} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

def restore_backup(backup_dir, config, include_factory_configs=False):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    
    errors = []
    
    if not os.path.exists(backup_dir):
        print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –±—ç–∫–∞–ø: {backup_dir}")
        return ["backup_dir_not_found"]
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –±—ç–∫–∞–ø–∞
    for item in os.listdir(backup_dir):
        try:
            backup_path = os.path.join(backup_dir, item)
            target_path = os.path.join(project_root, item)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if is_excluded(item, config):
                print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {item}")
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
            if not include_factory_configs and item in config['factory_configs']:
                print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {item}")
                continue
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª/–ø–∞–ø–∫—É
            if os.path.exists(target_path):
                remove_old(target_path)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            if os.path.isdir(backup_path):
                shutil.copytree(backup_path, target_path)
            else:
                shutil.copy2(backup_path, target_path)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {item}: {e}")
            errors.append(item)
    
    return errors

def remove_backup(backup_dir):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    if os.path.exists(backup_dir):
        shutil.rmtree(backup_dir)

def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    requirements_path = os.path.join(project_root, "requirements.txt")
    
    print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ {requirements_path}...")
    try:
        pip_result = subprocess.run([
            "python", "-m", "pip", "install", "-r", requirements_path
        ], capture_output=True, text=True)
        print(pip_result.stdout)
        if pip_result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {pip_result.stderr}")
            raise Exception("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        raise

def run_database_migration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
    project_root = find_project_root()
    db_manager_path = os.path.join(project_root, "tools", "database_manager.py")
    
    if not os.path.exists(db_manager_path):
        print("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç database_manager.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –ë–î")
        return
    
    print("üóÑ –ó–∞–ø—É—Å–∫–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é)
    db_path = os.path.join(project_root, "data", "core.db")
    if not os.path.exists(db_path):
        print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Unicode –Ω–∞ Windows
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        print(f"üîç –ó–∞–ø—É—Å–∫–∞—é: python {db_manager_path} --all --migrate")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
        migration_result = subprocess.run([
            "python", db_manager_path, "--all", "--migrate"
        ], capture_output=True, text=True, encoding='utf-8', errors='replace', env=env, cwd=project_root)
        
        print(f"üîç –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {migration_result.returncode}")
        
        if migration_result.returncode == 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            if migration_result.stdout:
                print("üì§ –í—ã–≤–æ–¥:")
                print(migration_result.stdout)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            if migration_result.stdout:
                print("üì§ STDOUT:")
                print(migration_result.stdout)
            if migration_result.stderr:
                print("üì§ STDERR:")
                print(migration_result.stderr)
            print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é:")
            print(f"   cd {project_root}")
            print(f"   python tools\\database_manager.py --all --migrate")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
        print("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é:")
        print(f"   cd {project_root}")
        print(f"   python tools\\database_manager.py --all --migrate")

# === –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ ===
def main():
    print("‚ö°Ô∏è Core Updater: —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è–¥—Ä–∞\n")
    
    # ‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å/—Ç–µ—Ä–º–∏–Ω–∞–ª!")
    print("   ‚ùå –ù–ï –∑–∞–ø—É—Å–∫–∞–π—Ç–µ –¥–≤–æ–π–Ω—ã–º –∫–ª–∏–∫–æ–º - —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–æ–±–ª–µ–º–∞–º")
    print("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: python core_updater.py")
    print("   üí° –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    project_root = find_project_root()
    if any(ord(char) > 127 for char in project_root):
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ-ASCII —Å–∏–º–≤–æ–ª—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü—É)!")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –Ω–∞ Windows.")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—É—Ç–∏ —Ç–æ–ª—å–∫–æ —Å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏.")
        print("   –ü—Ä–∏–º–µ—Ä: E:\\Projects\\Coreness\\Development\\Builds\\Coreness Base")
        print()
        continue_update = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (Y/N): ").strip().lower()
        if continue_update != 'y':
            print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    available_versions = get_available_versions(config)
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:")
    for version in available_versions:
        version_info = config['versions'][version]
        print(f"  ‚Ä¢ {version.upper()}: {version_info['name']} - {version_info['description']}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
    while True:
        selected_version = input(f"\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({', '.join(available_versions)}): ").strip().lower()
        if validate_version(selected_version, config):
            break
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available_versions)}")

    version_info = get_version_info(selected_version, config)
    print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {version_info['name']} ({version_info['description']})")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
    update_factory_configs = input("\n–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): ").strip().lower() == 'y'

    if update_factory_configs:
        print("üõ† –í–∫–ª—é—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤!")
    else:
        print("üìÅ –ó–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã (–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)")

    print(f"\nüìÅ –ë—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –í–°–ï —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –∫—Ä–æ–º–µ:")
    print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–∏–π: {', '.join(config['exclude_paths'])}")
    if not update_factory_configs:
        print(f"  ‚Ä¢ –ó–∞–≤–æ–¥—Å–∫–∏—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤: {', '.join(config['factory_configs'])}")
    
    print(f"\nüóë –ß–∏—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ):")
    print(f"  ‚Ä¢ {', '.join(config['clean_sync_items'])}")
    print(f"  ‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö")

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    base_backup_dir = os.path.join(project_root, config['backup']['dir_name'])
    backup_dir = get_unique_backup_dir(base_backup_dir)
    print(f"\nüóÇ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ {backup_dir}...")
    backup_paths(backup_dir, config, update_factory_configs)

    backup_restored = False
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        github_token = get_github_token(version_info)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        if github_token:
            # Pro –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω
            print(f"üîë –ü–æ–¥–∫–ª—é—á–∞—é—Å—å —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è Pro –≤–µ—Ä—Å–∏–∏...")
            headers = {"Authorization": f"token {github_token}"}
        else:
            # Base –≤–µ—Ä—Å–∏—è - –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            print(f"üîì –°–∫–∞—á–∏–≤–∞—é Base –≤–µ—Ä—Å–∏—é –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)...")
            headers = {}
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤ —Å GitHub
            repo_url = version_info['repo_url']
            branch = version_info['branch']
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            download_methods = [
                # 1. Archive –ø–æ –≤–µ—Ç–∫–µ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)
                f"{repo_url}/archive/refs/heads/{branch}.zip",
                # 2. Latest release (–µ—Å–ª–∏ –µ—Å—Ç—å)
                f"{repo_url}/releases/latest/download/source.zip",
            ]
            
            print(f"üîΩ –°–∫–∞—á–∏–≤–∞—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {repo_url}")
            print(f"   –í–µ—Ç–∫–∞: {branch}")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            response = None
            for i, zip_url in enumerate(download_methods, 1):
                print(f"   üîç –ú–µ—Ç–æ–¥ {i}: {zip_url}")
                
                try:
                    response = requests.get(zip_url, headers=headers)
                    if response.status_code == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
                        break
                    else:
                        print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            if not response or response.status_code != 200:
                if github_token:
                    # Pro –≤–µ—Ä—Å–∏—è - –ø—Ä–æ–±—É–µ–º —Å —Ä—É—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                    print("‚ÑπÔ∏è –ü—Ä–æ–±—É—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é...")
                    github_token = request_manual_token()
                    headers = {"Authorization": f"token {github_token}"}
                    
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å —Ä—É—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    print(f"üîΩ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —Ä—É—á–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
                    
                    response = None
                    for i, zip_url in enumerate(download_methods, 1):
                        print(f"   üîç –ú–µ—Ç–æ–¥ {i}: {zip_url}")
                        
                        try:
                            response = requests.get(zip_url, headers=headers)
                            if response.status_code == 200:
                                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
                                break
                            else:
                                print(f"   ‚ùå –°—Ç–∞—Ç—É—Å: {response.status_code}")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                    
                    if not response or response.status_code != 200:
                        raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å")
                else:
                    # Base –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Base –≤–µ—Ä—Å–∏—é")
                    print("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                    print("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
                    print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –≤–µ—Ç–∫–∏ main")
                    print("   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Base –≤–µ—Ä—Å–∏–∏: –≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —É–¥–∞–ª–∏—Å—å")
                    
        except Exception as e:
            if github_token:
                # Pro –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Pro –≤–µ—Ä—Å–∏–∏: {e}")
                print("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print("   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å GitHub —Ç–æ–∫–µ–Ω–∞")
                print("   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é")
                print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ —Ä–µ–ª–∏–∑–∞ —Å –∞—Ä—Ö–∏–≤–æ–º source.zip")
            else:
                # Base –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Base –≤–µ—Ä—Å–∏–∏: {e}")
                print("‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
                print("   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
                print("   ‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            raise
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
        with tempfile.TemporaryDirectory() as tmpdir:
            zip_path = os.path.join(tmpdir, "repo.zip")
            with open(zip_path, "wb") as f:
                f.write(response.content)

            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(tmpdir)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
            repo_root = None
            for name in os.listdir(tmpdir):
                if os.path.isdir(os.path.join(tmpdir, name)) and name.endswith(f"-{branch}"):
                    repo_root = os.path.join(tmpdir, name)
                    break
            
            if not repo_root:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏!")


            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            print("‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏...")
            for item in os.listdir(repo_root):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
                if is_excluded(item, config):
                    print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π: {item}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–æ–¥—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
                if not update_factory_configs and item in config['factory_configs']:
                    print(f"‚è≠ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–≤–æ–¥—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥: {item}")
                    continue
                
                abs_old = os.path.join(project_root, item)
                abs_new = os.path.join(repo_root, item)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                if is_clean_sync_item(item, config):
                    print(f"üóë –ß–∏—Å—Ç–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {item}")
                    remove_old(abs_old)
                    copy_new(abs_new, abs_old)
                else:
                    print(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é: {item}")
                    remove_old(abs_old)
                    copy_new(abs_new, abs_old)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        install_dependencies()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        run_database_migration()

        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É–¥–∞–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞
        if config['backup']['default_keep']:
            keep_backup = input("\n–£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é? (Y/N, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é N): ").strip().lower() == 'y'
            if keep_backup:
                remove_backup(backup_dir)
                print("üóë –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞.")
            else:
                print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}")
        else:
            remove_backup(backup_dir)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (—Å–∫—Ä–∏–ø—Ç –Ω–µ –≤ tools/), —É–¥–∞–ª—è–µ–º —Å–∞–º —Å–∫—Ä–∏–ø—Ç
        script_dir = os.path.dirname(os.path.abspath(__file__))
        is_in_tools = os.path.basename(script_dir) == "tools"
        
        if not is_in_tools:
            script_path = os.path.abspath(__file__)
            try:
                os.remove(script_path)
                print(f"üóë –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω: {script_path}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

        print("\nüöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        print("‚è™ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        errors = restore_backup(backup_dir, config, update_factory_configs)
        if errors:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏: {errors}")
            print(f"‚ùó –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {backup_dir}. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é!")
        else:
            print("‚úÖ –û—Ç–∫–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–µ–∫—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            if config['backup']['default_keep']:
                print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_dir}")
            else:
                remove_backup(backup_dir)
        backup_restored = True

    finally:
        # –ß–∏—Å—Ç–∏–º –±—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ –∏ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
        if not backup_restored and not config['backup']['default_keep']:
            remove_backup(backup_dir)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        import traceback
        traceback.print_exc()
        print("\n" + "="*50)
        print("üí° –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        try:
            input()
        except:
            # –ï—Å–ª–∏ input() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º os.system
            import os
            os.system("pause") 