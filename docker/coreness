#!/bin/bash

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Coreness
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: coreness [start|stop|restart|logs|status|update]

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥
COMMAND_NAME="coreness"
COMMAND_DESCRIPTION="Coreness - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π"

# –ü—É—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º –∏ —Ñ–∞–π–ª–∞–º
TOOLS_DIR="tools/core"
DATABASE_MANAGER_SCRIPT="tools/database_manager.py"
CORE_UPDATER_SCRIPT="tools/core/core_updater.py"
DOCKER_COMPOSE_FILE="docker-compose.yml"
DOCKER_DIR="docker"
MAIN_SCRIPT="main.py"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
CONTAINER_NAME="coreness-service"
CONTAINER_STATS_NAME="coreness-container"

# –ê–ª–∏–∞—Å—ã –∫–æ–º–∞–Ω–¥
ALIASES=("coreness-start" "coreness-stop" "coreness-restart" "coreness-logs" "coreness-status" "coreness-update" "coreness-db" "coreness-shell" "coreness-kill")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_DIR=""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
find_project_dir() {
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if [ -n "$CORENESS_PROJECT_DIR" ] && [ -d "$CORENESS_PROJECT_DIR" ]; then
        PROJECT_DIR="$CORENESS_PROJECT_DIR"
        return 0
    fi
    
    # –ò—â–µ–º –ø–∞–ø–∫—É —Å docker compose.yml –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ -f "./$DOCKER_DIR/$DOCKER_COMPOSE_FILE" ]; then
        PROJECT_DIR="$(pwd)"
        return 0
    fi
    
    # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ -f "../$DOCKER_DIR/$DOCKER_COMPOSE_FILE" ]; then
        PROJECT_DIR="$(dirname "$(pwd)")"
        return 0
    fi
    
    # –ò—â–µ–º –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for dir in "$HOME"/*; do
        if [ -d "$dir" ] && [ -f "$dir/$DOCKER_DIR/$DOCKER_COMPOSE_FILE" ]; then
            PROJECT_DIR="$dir"
            return 0
        fi
    done
    
    # –ò—â–µ–º –≤ /opt
    if [ -d "/opt" ]; then
        for dir in /opt/*; do
            if [ -d "$dir" ] && [ -f "$dir/$DOCKER_DIR/$DOCKER_COMPOSE_FILE" ]; then
                PROJECT_DIR="$dir"
                return 0
            fi
        done
    fi
    
    return 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker
check_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
ensure_project_dir() {
    if ! find_project_dir; then
        echo -e "${RED}‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        exit 1
    fi
    cd "$PROJECT_DIR"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è docker compose –∫–æ–º–∞–Ω–¥
docker_compose() {
    docker compose -f docker/docker-compose.yml "$@"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
ensure_container_running() {
    if ! docker_compose ps | grep -q "$CONTAINER_STATS_NAME.*Up"; then
        echo -e "${YELLOW}‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...${NC}"
        docker_compose up -d
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
install_commands() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}   –£–°–¢–ê–ù–û–í–ö–ê –ì–õ–û–ë–ê–õ–¨–ù–´–• –ö–û–ú–ê–ù–î   ${NC}"
    echo -e "${BLUE}================================${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if [ "$EUID" -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç root. –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ.${NC}"
        INSTALL_DIR="/usr/local/bin"
    else
        echo -e "${YELLOW}‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ö–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ.${NC}"
        INSTALL_DIR="$HOME/.local/bin"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        mkdir -p "$INSTALL_DIR"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ PATH –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        if ! echo "$PATH" | grep -q "$INSTALL_DIR"; then
            echo -e "${YELLOW}üí° –î–æ–±–∞–≤–ª—è–µ–º $INSTALL_DIR –≤ PATH...${NC}"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$HOME/.bashrc"
            echo "export PATH=\"\$PATH:$INSTALL_DIR\"" >> "$HOME/.profile"
            echo -e "${GREEN}‚úÖ PATH –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: source ~/.bashrc${NC}"
        fi
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–∫—Ä–∏–ø—Ç—É
    # –ï—Å–ª–∏ –º—ã –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ /usr/local/bin, –∏—â–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ docker/
    if [ "$(dirname "${BASH_SOURCE[0]}")" = "/usr/local/bin" ]; then
        # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫—Ä–∏–ø—Ç –∏–∑ docker/
        if find_project_dir; then
            SCRIPT_PATH="$PROJECT_DIR/docker/coreness"
        else
            echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∫—Ä–∏–ø—Ç coreness${NC}"
            exit 1
        fi
    else
        # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã –∏–∑ docker/, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç
        SCRIPT_PATH="${BASH_SOURCE[0]}"
    fi
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–º–∞–Ω–¥—É –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -f "$INSTALL_DIR/$COMMAND_NAME" ]; then
        echo -e "${YELLOW}üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É...${NC}"
        rm "$INSTALL_DIR/$COMMAND_NAME"
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    if cp "$SCRIPT_PATH" "$INSTALL_DIR/$COMMAND_NAME"; then
        chmod +x "$INSTALL_DIR/$COMMAND_NAME"
        echo -e "${GREEN}‚úÖ –ö–æ–º–∞–Ω–¥–∞ '$COMMAND_NAME' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã '$COMMAND_NAME'${NC}"
        exit 1
    fi
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å—ã
    create_aliases
    
    echo -e "${GREEN}üéâ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
    echo ""
    echo -e "${BLUE}–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:${NC}"
    echo "  $COMMAND_NAME install   # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥"
    echo "  $COMMAND_NAME start     # –ó–∞–ø—É—Å–∫"
    echo "  $COMMAND_NAME stop      # –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "  $COMMAND_NAME restart   # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  $COMMAND_NAME logs      # –õ–æ–≥–∏"
    echo "  $COMMAND_NAME status    # –°—Ç–∞—Ç—É—Å"
    echo "  $COMMAND_NAME update    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo "  $COMMAND_NAME db        # –†–∞–±–æ—Ç–∞ —Å –ë–î"
    echo "  $COMMAND_NAME shell     # Shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  $COMMAND_NAME help      # –°–ø—Ä–∞–≤–∫–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤
create_aliases() {
    echo -e "${YELLOW}üîó –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–æ–≤...${NC}"
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å—ã –≤ .bashrc
    ALIAS_FILE="$HOME/.bashrc"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–ª–∏–∞—Å—ã
    if ! grep -q "# $COMMAND_DESCRIPTION aliases" "$ALIAS_FILE" 2>/dev/null; then
        echo "" >> "$ALIAS_FILE"
        echo "# $COMMAND_DESCRIPTION aliases" >> "$ALIAS_FILE"
        
        # –°–æ–∑–¥–∞–µ–º –∞–ª–∏–∞—Å—ã –∏–∑ –º–∞—Å—Å–∏–≤–∞
        for alias in "${ALIASES[@]}"; do
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∞–ª–∏–∞—Å–∞ (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å)
            command="${alias#$COMMAND_NAME-}"
            echo "alias $alias='$COMMAND_NAME $command'" >> "$ALIAS_FILE"
        done
        
        echo -e "${GREEN}‚úÖ –ê–ª–∏–∞—Å—ã —Å–æ–∑–¥–∞–Ω—ã${NC}"
    else
        echo -e "${GREEN}‚úÖ –ê–ª–∏–∞—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç${NC}"
    fi
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start_service() {
    echo -e "${YELLOW}üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∏–º–µ–Ω–∏
    if docker start $CONTAINER_STATS_NAME; then
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${YELLOW}üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $COMMAND_NAME app-start${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞${NC}"
        exit 1
    fi
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop_service() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
    
    if docker stop $CONTAINER_STATS_NAME; then
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞${NC}"
        exit 1
    fi
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
restart_service() {
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${NC}"
    
    if docker restart $CONTAINER_STATS_NAME; then
        echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω${NC}"
        echo -e "${YELLOW}üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $COMMAND_NAME app-start${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
start_app() {
    echo -e "${YELLOW}üì± –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        echo -e "${YELLOW}üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $COMMAND_NAME start${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ
    if docker exec $CONTAINER_STATS_NAME pgrep -f "python3 $MAIN_SCRIPT" > /dev/null; then
        echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    else
        # –ó–∞–ø—É—Å–∫–∞–µ–º main.py
        if docker exec -d $CONTAINER_STATS_NAME python3 $MAIN_SCRIPT; then
            echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        else
            echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è${NC}"
            echo -e "${YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $COMMAND_NAME logs${NC}"
            exit 1
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
stop_app() {
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    PROCESSES=$(docker exec $CONTAINER_STATS_NAME pgrep -f "python3 $MAIN_SCRIPT")
    if [ -z "$PROCESSES" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}üìã –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã: $PROCESSES${NC}"
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (SIGTERM)
    echo -e "${YELLOW}üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ SIGTERM...${NC}"
    docker exec $CONTAINER_STATS_NAME pkill -f "python3 $MAIN_SCRIPT"
    
    # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
    REMAINING=$(docker exec $CONTAINER_STATS_NAME pgrep -f "python3 $MAIN_SCRIPT")
    if [ -n "$REMAINING" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ SIGKILL...${NC}"
        docker exec $CONTAINER_STATS_NAME pkill -9 -f "python3 $MAIN_SCRIPT"
        sleep 1
    fi
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    FINAL_CHECK=$(docker exec $CONTAINER_STATS_NAME pgrep -f "python3 $MAIN_SCRIPT")
    if [ -z "$FINAL_CHECK" ]; then
        echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ${NC}"
        echo -e "${YELLOW}üí° –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã: $FINAL_CHECK${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
restart_app() {
    echo -e "${YELLOW}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        echo -e "${YELLOW}üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $COMMAND_NAME start${NC}"
        exit 1
    fi
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã main.py –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
    docker exec $CONTAINER_STATS_NAME pkill -f "python3 $MAIN_SCRIPT" 2>/dev/null || true
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
    sleep 2
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º main.py –∑–∞–Ω–æ–≤–æ
    echo -e "${YELLOW}üì± –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
    if docker exec -d $CONTAINER_STATS_NAME python3 $MAIN_SCRIPT; then
        echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ${NC}"
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è${NC}"
        echo -e "${YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $COMMAND_NAME logs${NC}"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª)
show_app_logs() {
    echo -e "${YELLOW}üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!${NC}"
        exit 1
    fi
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    LINES=${1:-10}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
    if ! [[ "$LINES" =~ ^[0-9]+$ ]]; then
        echo -e "${RED}‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!${NC}"
        echo -e "${YELLOW}üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $COMMAND_NAME app-logs [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫]${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ $LINES —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤...${NC}"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    docker exec $CONTAINER_STATS_NAME tail -f -n $LINES /workspace/logs/bot.log
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
show_logs() {
    docker logs -f $CONTAINER_STATS_NAME
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
    docker ps --filter "name=$CONTAINER_STATS_NAME"
    
    echo -e "\n${BLUE}üì± –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:${NC}"
    if docker exec $CONTAINER_STATS_NAME pgrep -f "python3 $MAIN_SCRIPT" > /dev/null 2>&1; then
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        PROCESS_INFO=$(docker exec $CONTAINER_STATS_NAME ps aux | grep "python3 $MAIN_SCRIPT" | grep -v grep)
        if [ -n "$PROCESS_INFO" ]; then
            PID=$(echo "$PROCESS_INFO" | awk '{print $2}')
            CPU=$(echo "$PROCESS_INFO" | awk '{print $3}')
            MEM=$(echo "$PROCESS_INFO" | awk '{print $4}')
            TIME=$(echo "$PROCESS_INFO" | awk '{print $10}')
            echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
            echo -e "   PID: $PID | CPU: $CPU% | MEM: $MEM% | TIME: $TIME"
        else
            echo -e "${YELLOW}‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞${NC}"
        fi
    else
        echo -e "${RED}‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ${NC}"
        echo -e "${YELLOW}üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: $COMMAND_NAME start${NC}"
    fi
    
    echo -e "\n${BLUE}üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:${NC}"
    docker stats --no-stream $CONTAINER_STATS_NAME 2>/dev/null || echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
manage_app_database() {
    echo -e "${YELLOW}üóÑ –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${YELLOW}‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...${NC}"
        docker start $CONTAINER_STATS_NAME
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º database_manager.py —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    shift  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (app-db)
    docker exec $CONTAINER_STATS_NAME python3 $DATABASE_MANAGER_SCRIPT "$@"
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
open_shell() {
    echo -e "${YELLOW}üêö –ó–∞–ø—É—Å–∫ shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
    if ! docker ps --filter "name=$CONTAINER_STATS_NAME" --filter "status=running" | grep -q "$CONTAINER_STATS_NAME"; then
        echo -e "${YELLOW}‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...${NC}"
        docker start $CONTAINER_STATS_NAME
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º bash –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    docker exec -it $CONTAINER_STATS_NAME bash
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
update_app() {
    echo -e "${YELLOW}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ $COMMAND_DESCRIPTION...${NC}"
    
    # –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ-—Ç–∞–∫–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
    if ! find_project_dir; then
        echo -e "${RED}‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!${NC}"
        echo -e "${YELLOW}üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é CORENESS_PROJECT_DIR${NC}"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º core_updater.py
    python3 "$PROJECT_DIR/$CORE_UPDATER_SCRIPT"
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
emergency_stop() {
    echo -e "${RED}üíÄ KILL ALL DOCKER${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è –£–±–∏–≤–∞—é –í–°–ï Docker –ø—Ä–æ—Ü–µ—Å—Å—ã!${NC}"
    echo ""
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo -e "${YELLOW}üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...${NC}"
    docker stop $(docker ps -q) 2>/dev/null || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    echo -e "${YELLOW}üóë –£–¥–∞–ª—è—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...${NC}"
    docker rm $(docker ps -aq) 2>/dev/null || echo "–ù–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker —Å–µ—Ä–≤–∏—Å
    echo -e "${YELLOW}‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker...${NC}"
    sudo systemctl stop docker 2>/dev/null || echo "Docker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    # –£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Docker
    echo -e "${YELLOW}üíÄ –£–±–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å—ã...${NC}"
    sudo pkill -f docker 2>/dev/null || echo "–ù–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    
    echo -e "${GREEN}‚úÖ –í–°–ï –£–ë–ò–¢–û!${NC}"
    echo -e "${YELLOW}üí° –ó–∞–ø—É—Å–∫: sudo systemctl start docker${NC}"
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${BLUE}$COMMAND_DESCRIPTION${NC}"
    echo ""
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $COMMAND_NAME [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  install         –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    echo "  start           –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  stop            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  restart         –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  app-start       –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  app-stop        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  app-restart     –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  app-update      –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  app-db          –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
    echo "  app-logs [N]    –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Ñ–∞–π–ª, N —Å—Ç—Ä–æ–∫)"
    echo "  logs            –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
    echo "  shell           –ó–∞–ø—É—Å—Ç–∏—Ç—å shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
    echo "  kill            üíÄ –£–±–∏—Ç—å –í–°–ï Docker –ø—Ä–æ—Ü–µ—Å—Å—ã"
    echo "  help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $COMMAND_NAME start                             # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"
    echo "  $COMMAND_NAME app-start                         # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    echo "  $COMMAND_NAME app-logs 50                       # –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (50 —Å—Ç—Ä–æ–∫)"
    echo "  $COMMAND_NAME app-db --all --migrate            # –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    # –î–ª—è –∫–æ–º–∞–Ω–¥—ã install –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if [ "$1" = "install" ]; then
        install_commands
        exit 0
    fi
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ–º Docker
    check_docker
    
    case "${1:-help}" in
        start)
            start_service
            ;;
        stop)
            stop_service
            ;;
        restart)
            restart_service
            ;;
        app-start)
            start_app
            ;;
        app-stop)
            stop_app
            ;;
        app-restart)
            restart_app
            ;;
        app-logs)
            show_app_logs "$2"
            ;;
        logs)
            show_logs
            ;;
        status)
            show_status
            ;;
        app-db)
            manage_app_database "$@"
            ;;
        shell)
            open_shell
            ;;
        app-update)
            update_app
            ;;
        kill)
            emergency_stop
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@"
