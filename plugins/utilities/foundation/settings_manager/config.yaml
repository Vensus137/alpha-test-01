name: "settings_manager"
description: "Менеджер настроек бота и глобальных параметров"
edition: "base"
singleton: true
dependencies:
  - "logger"
  - "plugins_manager"
settings:
  config_dir:
    type: string
    default: "config"
    description: "Папка с глобальными конфигурационными файлами"
  default_preset:
    type: string
    default: "default"
    description: "Пресет по умолчанию если active_preset не указан в глобальных настройках"
interface:
  methods:
    get_startup_time:
      description: "Получить время запуска приложения"
      input: {}
      output:
        type: datetime
        description: "Время запуска приложения (локальное время)"
    get_current_preset:
      description: "Получить текущий активный пресет"
      input: {}
      output:
        type: string
        description: "Имя текущего пресета (например, 'dev', 'test', 'prod', 'default')"
    get_settings_section:
      description: "Получить секцию настроек из config/settings.yaml по имени"
      input:
        section:
          type: string
          description: "Имя секции (например, 'logger', 'bot_docs', 'trigger_manager')"
      output:
        type: dict | null
        description: "Секция настроек или None, если не найдена"
    get_plugin_settings:
      description: "Универсальный метод для получения настроек любого плагина (утилиты или сервиса)"
      input:
        plugin_name:
          type: string
          description: "Имя утилиты или сервиса"
      output:
        type: dict
        description: "Итоговые настройки плагина с приоритетом глобальные > локальные"
    get_all_settings:
      description: "Получить все настройки из settings.yaml"
      input: {}
      output:
        type: dict
        description: "Все настройки из settings.yaml"
    get_project_root:
      description: "Получить корень проекта"
      input: {}
      output:
        type: Path
        description: "Путь к корню проекта"
    get_global_settings:
      description: "Получить глобальные настройки из секции 'global'"
      input: {}
      output:
        type: dict
        description: "Глобальные настройки"
    get_file_base_path:
      description: "Получить базовый путь для файлов из глобальных настроек"
      input: {}
      output:
        type: string
        description: "Базовый путь для файлов (например, 'resources')"
    get_ssl_certificates_path:
      description: "Получить путь к папке SSL сертификатов из глобальных настроек"
      input: {}
      output:
        type: string
        description: "Путь к папке SSL сертификатов (например, 'data/ssl_certificates')"
    get_ssl_certificate_path:
      description: "Получить полный путь к конкретному SSL сертификату"
      input:
        certificate_name:
          type: string
          description: "Название сертификата (опционально, если не указано - используется дефолтный)"
      output:
        type: string
        description: "Полный путь к SSL сертификату"
    resolve_file_path:
      description: "Разрешить относительный путь файла относительно базового пути"
      input:
        relative_path:
          type: string
          description: "Относительный путь (например, 'speech/tts/file.mp3')"
      output:
        type: string
        description: "Полный путь относительно корня проекта"
    get_relative_path:
      description: "Получить относительный путь файла от базового пути"
      input:
        full_path:
          type: string
          description: "Полный путь к файлу"
      output:
        type: string
        description: "Относительный путь относительно базового пути"
    resolve_env_variables:
      description: "Универсальный метод для обработки переменных окружения в данных"
      input:
        data:
          type: any
          description: "Данные для обработки (dict, list, str, или другие типы)"
      output:
        type: any
        description: "Данные с замененными переменными окружения в формате ${VARIABLE}"
    reload:
      description: "Перезагрузить настройки бота и глобальные параметры"
      input: {}
      output:
        type: void
        description: "Нет возвращаемого значения"
    get_startup_plan:
      description: "Получить полный план запуска приложения с кэшированием"
      input: {}
      output:
        type: dict
        description: "План запуска с включенными сервисами, нужными утилитами и порядком инициализации"
    get_enabled_services:
      description: "Получить список включенных сервисов с кэшированием"
      input: {}
      output:
        type: list
        description: "Список имен включенных сервисов"
    get_required_utilities:
      description: "Получить список нужных утилит для включенных сервисов с кэшированием"
      input: {}
      output:
        type: list
        description: "Список имен нужных утилит"
    invalidate_startup_cache:
      description: "Инвалидировать кэш планов запуска"
      input: {}
      output:
        type: void
        description: "Нет возвращаемого значения"
features:
  - "Загрузка глобальных настроек из config/settings.yaml"
  - "Поддержка пресетов конфигурации через переменную CONFIG_PRESET"
  - "Автоматический fallback на default пресет если указанный пресет не найден"
  - "Универсальное слияние настроек с приоритетом (глобальные > локальные)"
  - "Автоматическое определение типа плагина (утилита/сервис)"
  - "Кеширование настроек для быстрого доступа"
  - "Интеграция с plugins_manager для получения информации о настройках утилит и сервисов"
  - "Хранение времени запуска приложения для использования сервисами"
  - "Планирование запуска приложения с анализом зависимостей"
  - "Кэширование планов запуска для оптимизации производительности"
  - "Автоматическая фильтрация отключенных плагинов" 