import json
from typing import Any, Dict, List, Optional

from sqlalchemy import Boolean, Column, DateTime, Integer, String, Text
from sqlalchemy.orm import DeclarativeMeta


class DataPreparer:
    """
    –ü–æ–¥–≥–æ—Ç–æ–≤—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLAlchemy –º–æ–¥–µ–ª—è–º–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã.
    """
    
    def __init__(self, **kwargs):
        self.logger = kwargs['logger']
        self.settings_manager = kwargs['settings_manager']
        self.datetime_formatter = kwargs['datetime_formatter']
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ settings_manager
        settings = self.settings_manager.get_plugin_settings("data_preparer")
        
        self.auto_detect_json = settings.get('auto_detect_json', True)
        self.strict_json_validation = settings.get('strict_json_validation', False)
        self.strict_mode = settings.get('strict_mode', False)
    
    def prepare_fields(self, model: DeclarativeMeta, fields: Dict[str, Any], 
                      json_fields: Optional[List[str]] = None, is_update: bool = False) -> Optional[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏
            allowed_fields = set(model.__table__.columns.keys())
            
            # üöÄ –ò–°–ö–õ–Æ–ß–ê–ï–ú PRIMARY KEY –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            if is_update:
                pk_columns = {col.name for col in model.__table__.primary_key.columns}
                allowed_fields = allowed_fields - pk_columns
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—è
            result = {k: v for k, v in fields.items() if k in allowed_fields}
            ignored_fields = set(fields.keys()) - allowed_fields
            
            if ignored_fields:
                self.logger.warning(f"–ò–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {ignored_fields}")
            
            if not result:
                self.logger.warning("–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return None
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –ø–æ–ª—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º
            result = self._convert_field_types(model, result, json_fields)
            
            return result
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–ª–µ–π: {e}")
            return None
    
    def _convert_field_types(self, model: DeclarativeMeta, fields: Dict[str, Any], 
                           json_fields: Optional[List[str]] = None) -> Dict[str, Any]:
        """–ü—Ä–∏–≤–æ–¥–∏—Ç –ø–æ–ª—è –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã."""
        result = {}
        
        for field_name, value in fields.items():
            if value is None:
                result[field_name] = None
                continue
                
            column = model.__table__.columns.get(field_name)
            if column is None:
                continue
            
            try:
                converted_value = self._convert_single_field(column, value, field_name, json_fields)
                result[field_name] = converted_value
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ–ª—è {field_name}: {e}")
                if self.strict_mode:
                    return None  # –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ
                result[field_name] = value  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        
        return result
    
    def _convert_single_field(self, column: Column, value: Any, field_name: str, 
                            json_fields: Optional[List[str]] = None) -> Any:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ –∫ –Ω—É–∂–Ω–æ–º—É —Ç–∏–ø—É."""
        # JSON –ø–æ–ª—è
        if json_fields and field_name in json_fields:
            if not isinstance(value, str):
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
                result = json.dumps(value, ensure_ascii=False)
                return result
            else:
                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                try:
                    json.loads(value)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    return value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                except json.JSONDecodeError:
                    # –ï—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    self.logger.warning(f"–ü–æ–ª–µ {field_name} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {value[:100]}...")
                    if self.strict_json_validation:
                        self.logger.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ –ø–æ–ª–µ {field_name}")
                        return None
                    return value  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
        column_type = type(column.type)
        
        # –°—Ç—Ä–æ–∫–æ–≤—ã–µ —Ç–∏–ø—ã
        if column_type in (String, Text):
            return str(value) if value is not None else None
        
        # –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
        elif column_type == Integer:
            return int(value) if value is not None else None
        
        # –ë—É–ª–µ–≤—ã —Ç–∏–ø—ã
        elif column_type == Boolean:
            if value is None:
                return None
            if isinstance(value, str):
                return value.lower() in ('true', '1', 'yes', 'on')
            if isinstance(value, bool):
                return value
            if isinstance(value, int):
                return bool(value)
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ
            return bool(value)
        
        # –î–∞—Ç–∞/–≤—Ä–µ–º—è
        elif column_type == DateTime:
            if isinstance(value, str):
                try:
                    return self.datetime_formatter.parse(value)
                except Exception:
                    return self.datetime_formatter.now_local()
            return value
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return value
    
    def prepare_for_update(self, model: DeclarativeMeta, fields: Dict[str, Any],
                          json_fields: Optional[List[str]] = None,
                          auto_timestamp_fields: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."""
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏
        all_fields = fields.copy()
        if auto_timestamp_fields:
            for field, value in auto_timestamp_fields.items():
                if field not in all_fields:  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    all_fields[field] = value
        
        # üöÄ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è —Å —Ñ–ª–∞–≥–æ–º is_update=True
        return self.prepare_fields(model, all_fields, json_fields=json_fields, is_update=True)
    
    def prepare_for_insert(self, model: DeclarativeMeta, fields: Dict[str, Any],
                          json_fields: Optional[List[str]] = None,
                          auto_timestamp_fields: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏."""
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏
        all_fields = fields.copy()
        if auto_timestamp_fields:
            for field, value in auto_timestamp_fields.items():
                if field not in all_fields:  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    all_fields[field] = value
        
        # üöÄ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—è —Å —Ñ–ª–∞–≥–æ–º is_update=False (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return self.prepare_fields(model, all_fields, json_fields=json_fields, is_update=False) 